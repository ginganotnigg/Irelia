syntax = "proto3";

package greyhole.redis;

option go_package = "internal/pkg/redis/api;redis";

message TLS {
    bool enabled              = 1;
    string cert               = 2;
    string key                = 3;
    string ca                 = 4;
    bool insecure_skip_verify = 5;
}

message Redis {
    // host:port address.
    string address = 1;
    // Use the specified Username to authenticate the current connection
    // with one of the connections defined in the ACL list when connecting
    // to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
    string username = 2;
    // Optional password. Must match the password specified in the
    // requirepass server configuration option (if connecting to a Redis 5.0 instance, or lower),
    // or the User Password when connecting to a Redis 6.0 instance, or greater,
    // that is using the Redis ACL system.
    string password = 3;
    // Database to be selected after connecting to the server.
    int32 db = 4;
    // Maximum number of retries before giving up.
    // Default is 3 retries; -1 (not 0) disables retries.
    int32 max_retries = 5;
    // Minimum backoff between each retry.
    // Default is 8 milliseconds; -1 disables backoff.
    int64 min_retry_backoff = 6;  // milliseconds
    // Maximum backoff between each retry.
    // Default is 512 milliseconds; -1 disables backoff.
    int64 max_retry_backoff = 7;  // milliseconds
    // Dial timeout for establishing new connections.
    // Default is 5 seconds.
    int64 dial_timeout = 8;  // milliseconds
    // Timeout for socket reads. If reached, commands will fail
    // with a timeout instead of blocking. Use value -1 for no timeout and 0 for default.
    // Default is 3 seconds.
    int64 read_timeout = 9;  // milliseconds
    // Timeout for socket writes. If reached, commands will fail
    // with a timeout instead of blocking.
    // Default is ReadTimeout.
    int64 write_timeout = 10;  // milliseconds
    // Type of connection pool.
    // true for FIFO pool, false for LIFO pool.
    // Note that fifo has higher overhead compared to lifo.
    bool pool_fifo = 11;
    // Maximum number of socket connections.
    // Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
    int32 pool_size = 12;
    // Minimum number of idle connections which is useful when establishing
    // new connection is slow.
    int32 min_idle_conns = 13;
    // Connection age at which client retires (closes) the connection.
    // Default is to not close aged connections.
    int64 max_conn_age = 14;  // milliseconds
    // Amount of time client waits for connection if all connections
    // are busy before returning an error.
    // Default is ReadTimeout + 1 second.
    int64 pool_timeout = 15;  // milliseconds
    // Amount of time after which client closes idle connections.
    // Should be less than server's timeout.
    // Default is 5 minutes. -1 disables idle timeout check.
    int64 idle_timeout = 16;  // milliseconds
    // Frequency of idle checks made by idle connections reaper.
    // Default is 1 minute. -1 disables idle connections reaper,
    // but idle connections are still discarded by the client
    // if IdleTimeout is set.
    int64 idle_check_frequency = 17;  // milliseconds
    // Enables read only queries on slave nodes.
    bool read_only = 18;
    // TLS Config to use. When set TLS will be negotiated.
    TLS tls = 19;

    string namespace = 20;
    bool debug       = 21;
    // ClientName will execute the `CLIENT SETNAME ClientName` command for each conn.
    string client_name = 22;
}