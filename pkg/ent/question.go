// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	irelia "irelia/api"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/question"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// InterviewID holds the value of the "interview_id" field.
	InterviewID string `json:"interview_id,omitempty"`
	// QuestionIndex holds the value of the "question_index" field.
	QuestionIndex int32 `json:"question_index,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Audio holds the value of the "audio" field.
	Audio string `json:"audio,omitempty"`
	// Lipsync holds the value of the "lipsync" field.
	Lipsync *irelia.LipSyncData `json:"lipsync,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// RecordProof holds the value of the "record_proof" field.
	RecordProof string `json:"record_proof,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Score holds the value of the "score" field.
	Score string `json:"score,omitempty"`
	// Status holds the value of the "status" field.
	Status irelia.QuestionStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges        QuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Interview holds the value of the interview edge.
	Interview *Interview `json:"interview,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InterviewOrErr returns the Interview value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) InterviewOrErr() (*Interview, error) {
	if e.Interview != nil {
		return e.Interview, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: interview.Label}
	}
	return nil, &NotLoadedError{edge: "interview"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldLipsync:
			values[i] = new([]byte)
		case question.FieldID, question.FieldQuestionIndex, question.FieldStatus:
			values[i] = new(sql.NullInt64)
		case question.FieldInterviewID, question.FieldContent, question.FieldAudio, question.FieldAnswer, question.FieldRecordProof, question.FieldComment, question.FieldScore:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case question.FieldInterviewID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interview_id", values[i])
			} else if value.Valid {
				q.InterviewID = value.String
			}
		case question.FieldQuestionIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_index", values[i])
			} else if value.Valid {
				q.QuestionIndex = int32(value.Int64)
			}
		case question.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				q.Content = value.String
			}
		case question.FieldAudio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio", values[i])
			} else if value.Valid {
				q.Audio = value.String
			}
		case question.FieldLipsync:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field lipsync", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &q.Lipsync); err != nil {
					return fmt.Errorf("unmarshal field lipsync: %w", err)
				}
			}
		case question.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				q.Answer = value.String
			}
		case question.FieldRecordProof:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field record_proof", values[i])
			} else if value.Valid {
				q.RecordProof = value.String
			}
		case question.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				q.Comment = value.String
			}
		case question.FieldScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				q.Score = value.String
			}
		case question.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				q.Status = irelia.QuestionStatus(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryInterview queries the "interview" edge of the Question entity.
func (q *Question) QueryInterview() *InterviewQuery {
	return NewQuestionClient(q.config).QueryInterview(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("interview_id=")
	builder.WriteString(q.InterviewID)
	builder.WriteString(", ")
	builder.WriteString("question_index=")
	builder.WriteString(fmt.Sprintf("%v", q.QuestionIndex))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(q.Content)
	builder.WriteString(", ")
	builder.WriteString("audio=")
	builder.WriteString(q.Audio)
	builder.WriteString(", ")
	builder.WriteString("lipsync=")
	builder.WriteString(fmt.Sprintf("%v", q.Lipsync))
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(q.Answer)
	builder.WriteString(", ")
	builder.WriteString("record_proof=")
	builder.WriteString(q.RecordProof)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(q.Comment)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(q.Score)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", q.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
