// Code generated by ent, DO NOT EDIT.

package interview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the interview type in the database.
	Label = "interview"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldExperience holds the string denoting the experience field in the database.
	FieldExperience = "experience"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldVoiceID holds the string denoting the voice_id field in the database.
	FieldVoiceID = "voice_id"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldSkillsScore holds the string denoting the skills_score field in the database.
	FieldSkillsScore = "skills_score"
	// FieldSkipCode holds the string denoting the skip_code field in the database.
	FieldSkipCode = "skip_code"
	// FieldTotalQuestions holds the string denoting the total_questions field in the database.
	FieldTotalQuestions = "total_questions"
	// FieldRemainingQuestions holds the string denoting the remaining_questions field in the database.
	FieldRemainingQuestions = "remaining_questions"
	// FieldTotalScore holds the string denoting the total_score field in the database.
	FieldTotalScore = "total_score"
	// FieldOverallScore holds the string denoting the overall_score field in the database.
	FieldOverallScore = "overall_score"
	// FieldPositiveFeedback holds the string denoting the positive_feedback field in the database.
	FieldPositiveFeedback = "positive_feedback"
	// FieldActionableFeedback holds the string denoting the actionable_feedback field in the database.
	FieldActionableFeedback = "actionable_feedback"
	// FieldFinalComment holds the string denoting the final_comment field in the database.
	FieldFinalComment = "final_comment"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// EdgeFavorites holds the string denoting the favorites edge name in mutations.
	EdgeFavorites = "favorites"
	// Table holds the table name of the interview in the database.
	Table = "interviews"
	// QuestionsTable is the table that holds the questions relation/edge.
	QuestionsTable = "questions"
	// QuestionsInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionsInverseTable = "questions"
	// QuestionsColumn is the table column denoting the questions relation/edge.
	QuestionsColumn = "interview_id"
	// FavoritesTable is the table that holds the favorites relation/edge.
	FavoritesTable = "interview_favorites"
	// FavoritesInverseTable is the table name for the InterviewFavorite entity.
	// It exists in this package in order to avoid circular dependency with the "interviewfavorite" package.
	FavoritesInverseTable = "interview_favorites"
	// FavoritesColumn is the table column denoting the favorites relation/edge.
	FavoritesColumn = "interview_id"
)

// Columns holds all SQL columns for interview fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldPosition,
	FieldExperience,
	FieldLanguage,
	FieldVoiceID,
	FieldSpeed,
	FieldSkills,
	FieldSkillsScore,
	FieldSkipCode,
	FieldTotalQuestions,
	FieldRemainingQuestions,
	FieldTotalScore,
	FieldOverallScore,
	FieldPositiveFeedback,
	FieldActionableFeedback,
	FieldFinalComment,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PositionValidator is a validator for the "position" field. It is called by the builders before save.
	PositionValidator func(string) error
	// LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	LanguageValidator func(string) error
	// DefaultSpeed holds the default value on creation for the "speed" field.
	DefaultSpeed int32
	// DefaultSkipCode holds the default value on creation for the "skip_code" field.
	DefaultSkipCode bool
	// DefaultTotalQuestions holds the default value on creation for the "total_questions" field.
	DefaultTotalQuestions int32
	// DefaultRemainingQuestions holds the default value on creation for the "remaining_questions" field.
	DefaultRemainingQuestions int32
	// DefaultOverallScore holds the default value on creation for the "overall_score" field.
	DefaultOverallScore float64
)

// OrderOption defines the ordering options for the Interview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByExperience orders the results by the experience field.
func ByExperience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExperience, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByVoiceID orders the results by the voice_id field.
func ByVoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoiceID, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// BySkipCode orders the results by the skip_code field.
func BySkipCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkipCode, opts...).ToFunc()
}

// ByTotalQuestions orders the results by the total_questions field.
func ByTotalQuestions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalQuestions, opts...).ToFunc()
}

// ByRemainingQuestions orders the results by the remaining_questions field.
func ByRemainingQuestions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingQuestions, opts...).ToFunc()
}

// ByOverallScore orders the results by the overall_score field.
func ByOverallScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverallScore, opts...).ToFunc()
}

// ByPositiveFeedback orders the results by the positive_feedback field.
func ByPositiveFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositiveFeedback, opts...).ToFunc()
}

// ByActionableFeedback orders the results by the actionable_feedback field.
func ByActionableFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionableFeedback, opts...).ToFunc()
}

// ByFinalComment orders the results by the final_comment field.
func ByFinalComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalComment, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByQuestionsCount orders the results by questions count.
func ByQuestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionsStep(), opts...)
	}
}

// ByQuestions orders the results by questions terms.
func ByQuestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFavoritesCount orders the results by favorites count.
func ByFavoritesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoritesStep(), opts...)
	}
}

// ByFavorites orders the results by favorites terms.
func ByFavorites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoritesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
	)
}
func newFavoritesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoritesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FavoritesTable, FavoritesColumn),
	)
}
