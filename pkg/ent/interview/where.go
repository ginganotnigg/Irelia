// Code generated by ent, DO NOT EDIT.

package interview

import (
	irelia "irelia/api"
	"irelia/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldUserID, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldPosition, v))
}

// Experience applies equality check predicate on the "experience" field. It's identical to ExperienceEQ.
func Experience(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldExperience, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldLanguage, v))
}

// VoiceID applies equality check predicate on the "voice_id" field. It's identical to VoiceIDEQ.
func VoiceID(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldVoiceID, v))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldSpeed, v))
}

// SkipCode applies equality check predicate on the "skip_code" field. It's identical to SkipCodeEQ.
func SkipCode(v bool) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldSkipCode, v))
}

// TotalQuestions applies equality check predicate on the "total_questions" field. It's identical to TotalQuestionsEQ.
func TotalQuestions(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldTotalQuestions, v))
}

// RemainingQuestions applies equality check predicate on the "remaining_questions" field. It's identical to RemainingQuestionsEQ.
func RemainingQuestions(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldRemainingQuestions, v))
}

// OverallScore applies equality check predicate on the "overall_score" field. It's identical to OverallScoreEQ.
func OverallScore(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldOverallScore, v))
}

// PositiveFeedback applies equality check predicate on the "positive_feedback" field. It's identical to PositiveFeedbackEQ.
func PositiveFeedback(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldPositiveFeedback, v))
}

// ActionableFeedback applies equality check predicate on the "actionable_feedback" field. It's identical to ActionableFeedbackEQ.
func ActionableFeedback(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldActionableFeedback, v))
}

// FinalComment applies equality check predicate on the "final_comment" field. It's identical to FinalCommentEQ.
func FinalComment(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldFinalComment, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldEQ(FieldStatus, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint64) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldUserID, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldPosition, v))
}

// ExperienceEQ applies the EQ predicate on the "experience" field.
func ExperienceEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldExperience, v))
}

// ExperienceNEQ applies the NEQ predicate on the "experience" field.
func ExperienceNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldExperience, v))
}

// ExperienceIn applies the In predicate on the "experience" field.
func ExperienceIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldExperience, vs...))
}

// ExperienceNotIn applies the NotIn predicate on the "experience" field.
func ExperienceNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldExperience, vs...))
}

// ExperienceGT applies the GT predicate on the "experience" field.
func ExperienceGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldExperience, v))
}

// ExperienceGTE applies the GTE predicate on the "experience" field.
func ExperienceGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldExperience, v))
}

// ExperienceLT applies the LT predicate on the "experience" field.
func ExperienceLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldExperience, v))
}

// ExperienceLTE applies the LTE predicate on the "experience" field.
func ExperienceLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldExperience, v))
}

// ExperienceContains applies the Contains predicate on the "experience" field.
func ExperienceContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldExperience, v))
}

// ExperienceHasPrefix applies the HasPrefix predicate on the "experience" field.
func ExperienceHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldExperience, v))
}

// ExperienceHasSuffix applies the HasSuffix predicate on the "experience" field.
func ExperienceHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldExperience, v))
}

// ExperienceIsNil applies the IsNil predicate on the "experience" field.
func ExperienceIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldExperience))
}

// ExperienceNotNil applies the NotNil predicate on the "experience" field.
func ExperienceNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldExperience))
}

// ExperienceEqualFold applies the EqualFold predicate on the "experience" field.
func ExperienceEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldExperience, v))
}

// ExperienceContainsFold applies the ContainsFold predicate on the "experience" field.
func ExperienceContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldExperience, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldLanguage, v))
}

// VoiceIDEQ applies the EQ predicate on the "voice_id" field.
func VoiceIDEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldVoiceID, v))
}

// VoiceIDNEQ applies the NEQ predicate on the "voice_id" field.
func VoiceIDNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldVoiceID, v))
}

// VoiceIDIn applies the In predicate on the "voice_id" field.
func VoiceIDIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldVoiceID, vs...))
}

// VoiceIDNotIn applies the NotIn predicate on the "voice_id" field.
func VoiceIDNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldVoiceID, vs...))
}

// VoiceIDGT applies the GT predicate on the "voice_id" field.
func VoiceIDGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldVoiceID, v))
}

// VoiceIDGTE applies the GTE predicate on the "voice_id" field.
func VoiceIDGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldVoiceID, v))
}

// VoiceIDLT applies the LT predicate on the "voice_id" field.
func VoiceIDLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldVoiceID, v))
}

// VoiceIDLTE applies the LTE predicate on the "voice_id" field.
func VoiceIDLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldVoiceID, v))
}

// VoiceIDContains applies the Contains predicate on the "voice_id" field.
func VoiceIDContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldVoiceID, v))
}

// VoiceIDHasPrefix applies the HasPrefix predicate on the "voice_id" field.
func VoiceIDHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldVoiceID, v))
}

// VoiceIDHasSuffix applies the HasSuffix predicate on the "voice_id" field.
func VoiceIDHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldVoiceID, v))
}

// VoiceIDIsNil applies the IsNil predicate on the "voice_id" field.
func VoiceIDIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldVoiceID))
}

// VoiceIDNotNil applies the NotNil predicate on the "voice_id" field.
func VoiceIDNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldVoiceID))
}

// VoiceIDEqualFold applies the EqualFold predicate on the "voice_id" field.
func VoiceIDEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldVoiceID, v))
}

// VoiceIDContainsFold applies the ContainsFold predicate on the "voice_id" field.
func VoiceIDContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldVoiceID, v))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldSpeed, v))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldSkills))
}

// SkillsScoreIsNil applies the IsNil predicate on the "skills_score" field.
func SkillsScoreIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldSkillsScore))
}

// SkillsScoreNotNil applies the NotNil predicate on the "skills_score" field.
func SkillsScoreNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldSkillsScore))
}

// SkipCodeEQ applies the EQ predicate on the "skip_code" field.
func SkipCodeEQ(v bool) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldSkipCode, v))
}

// SkipCodeNEQ applies the NEQ predicate on the "skip_code" field.
func SkipCodeNEQ(v bool) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldSkipCode, v))
}

// TotalQuestionsEQ applies the EQ predicate on the "total_questions" field.
func TotalQuestionsEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldTotalQuestions, v))
}

// TotalQuestionsNEQ applies the NEQ predicate on the "total_questions" field.
func TotalQuestionsNEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldTotalQuestions, v))
}

// TotalQuestionsIn applies the In predicate on the "total_questions" field.
func TotalQuestionsIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldTotalQuestions, vs...))
}

// TotalQuestionsNotIn applies the NotIn predicate on the "total_questions" field.
func TotalQuestionsNotIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldTotalQuestions, vs...))
}

// TotalQuestionsGT applies the GT predicate on the "total_questions" field.
func TotalQuestionsGT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldTotalQuestions, v))
}

// TotalQuestionsGTE applies the GTE predicate on the "total_questions" field.
func TotalQuestionsGTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldTotalQuestions, v))
}

// TotalQuestionsLT applies the LT predicate on the "total_questions" field.
func TotalQuestionsLT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldTotalQuestions, v))
}

// TotalQuestionsLTE applies the LTE predicate on the "total_questions" field.
func TotalQuestionsLTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldTotalQuestions, v))
}

// RemainingQuestionsEQ applies the EQ predicate on the "remaining_questions" field.
func RemainingQuestionsEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldRemainingQuestions, v))
}

// RemainingQuestionsNEQ applies the NEQ predicate on the "remaining_questions" field.
func RemainingQuestionsNEQ(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldRemainingQuestions, v))
}

// RemainingQuestionsIn applies the In predicate on the "remaining_questions" field.
func RemainingQuestionsIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldRemainingQuestions, vs...))
}

// RemainingQuestionsNotIn applies the NotIn predicate on the "remaining_questions" field.
func RemainingQuestionsNotIn(vs ...int32) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldRemainingQuestions, vs...))
}

// RemainingQuestionsGT applies the GT predicate on the "remaining_questions" field.
func RemainingQuestionsGT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldRemainingQuestions, v))
}

// RemainingQuestionsGTE applies the GTE predicate on the "remaining_questions" field.
func RemainingQuestionsGTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldRemainingQuestions, v))
}

// RemainingQuestionsLT applies the LT predicate on the "remaining_questions" field.
func RemainingQuestionsLT(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldRemainingQuestions, v))
}

// RemainingQuestionsLTE applies the LTE predicate on the "remaining_questions" field.
func RemainingQuestionsLTE(v int32) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldRemainingQuestions, v))
}

// TotalScoreIsNil applies the IsNil predicate on the "total_score" field.
func TotalScoreIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldTotalScore))
}

// TotalScoreNotNil applies the NotNil predicate on the "total_score" field.
func TotalScoreNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldTotalScore))
}

// OverallScoreEQ applies the EQ predicate on the "overall_score" field.
func OverallScoreEQ(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldOverallScore, v))
}

// OverallScoreNEQ applies the NEQ predicate on the "overall_score" field.
func OverallScoreNEQ(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldOverallScore, v))
}

// OverallScoreIn applies the In predicate on the "overall_score" field.
func OverallScoreIn(vs ...float64) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldOverallScore, vs...))
}

// OverallScoreNotIn applies the NotIn predicate on the "overall_score" field.
func OverallScoreNotIn(vs ...float64) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldOverallScore, vs...))
}

// OverallScoreGT applies the GT predicate on the "overall_score" field.
func OverallScoreGT(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldOverallScore, v))
}

// OverallScoreGTE applies the GTE predicate on the "overall_score" field.
func OverallScoreGTE(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldOverallScore, v))
}

// OverallScoreLT applies the LT predicate on the "overall_score" field.
func OverallScoreLT(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldOverallScore, v))
}

// OverallScoreLTE applies the LTE predicate on the "overall_score" field.
func OverallScoreLTE(v float64) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldOverallScore, v))
}

// PositiveFeedbackEQ applies the EQ predicate on the "positive_feedback" field.
func PositiveFeedbackEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldPositiveFeedback, v))
}

// PositiveFeedbackNEQ applies the NEQ predicate on the "positive_feedback" field.
func PositiveFeedbackNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldPositiveFeedback, v))
}

// PositiveFeedbackIn applies the In predicate on the "positive_feedback" field.
func PositiveFeedbackIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldPositiveFeedback, vs...))
}

// PositiveFeedbackNotIn applies the NotIn predicate on the "positive_feedback" field.
func PositiveFeedbackNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldPositiveFeedback, vs...))
}

// PositiveFeedbackGT applies the GT predicate on the "positive_feedback" field.
func PositiveFeedbackGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldPositiveFeedback, v))
}

// PositiveFeedbackGTE applies the GTE predicate on the "positive_feedback" field.
func PositiveFeedbackGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldPositiveFeedback, v))
}

// PositiveFeedbackLT applies the LT predicate on the "positive_feedback" field.
func PositiveFeedbackLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldPositiveFeedback, v))
}

// PositiveFeedbackLTE applies the LTE predicate on the "positive_feedback" field.
func PositiveFeedbackLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldPositiveFeedback, v))
}

// PositiveFeedbackContains applies the Contains predicate on the "positive_feedback" field.
func PositiveFeedbackContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldPositiveFeedback, v))
}

// PositiveFeedbackHasPrefix applies the HasPrefix predicate on the "positive_feedback" field.
func PositiveFeedbackHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldPositiveFeedback, v))
}

// PositiveFeedbackHasSuffix applies the HasSuffix predicate on the "positive_feedback" field.
func PositiveFeedbackHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldPositiveFeedback, v))
}

// PositiveFeedbackIsNil applies the IsNil predicate on the "positive_feedback" field.
func PositiveFeedbackIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldPositiveFeedback))
}

// PositiveFeedbackNotNil applies the NotNil predicate on the "positive_feedback" field.
func PositiveFeedbackNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldPositiveFeedback))
}

// PositiveFeedbackEqualFold applies the EqualFold predicate on the "positive_feedback" field.
func PositiveFeedbackEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldPositiveFeedback, v))
}

// PositiveFeedbackContainsFold applies the ContainsFold predicate on the "positive_feedback" field.
func PositiveFeedbackContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldPositiveFeedback, v))
}

// ActionableFeedbackEQ applies the EQ predicate on the "actionable_feedback" field.
func ActionableFeedbackEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldActionableFeedback, v))
}

// ActionableFeedbackNEQ applies the NEQ predicate on the "actionable_feedback" field.
func ActionableFeedbackNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldActionableFeedback, v))
}

// ActionableFeedbackIn applies the In predicate on the "actionable_feedback" field.
func ActionableFeedbackIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldActionableFeedback, vs...))
}

// ActionableFeedbackNotIn applies the NotIn predicate on the "actionable_feedback" field.
func ActionableFeedbackNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldActionableFeedback, vs...))
}

// ActionableFeedbackGT applies the GT predicate on the "actionable_feedback" field.
func ActionableFeedbackGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldActionableFeedback, v))
}

// ActionableFeedbackGTE applies the GTE predicate on the "actionable_feedback" field.
func ActionableFeedbackGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldActionableFeedback, v))
}

// ActionableFeedbackLT applies the LT predicate on the "actionable_feedback" field.
func ActionableFeedbackLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldActionableFeedback, v))
}

// ActionableFeedbackLTE applies the LTE predicate on the "actionable_feedback" field.
func ActionableFeedbackLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldActionableFeedback, v))
}

// ActionableFeedbackContains applies the Contains predicate on the "actionable_feedback" field.
func ActionableFeedbackContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldActionableFeedback, v))
}

// ActionableFeedbackHasPrefix applies the HasPrefix predicate on the "actionable_feedback" field.
func ActionableFeedbackHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldActionableFeedback, v))
}

// ActionableFeedbackHasSuffix applies the HasSuffix predicate on the "actionable_feedback" field.
func ActionableFeedbackHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldActionableFeedback, v))
}

// ActionableFeedbackIsNil applies the IsNil predicate on the "actionable_feedback" field.
func ActionableFeedbackIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldActionableFeedback))
}

// ActionableFeedbackNotNil applies the NotNil predicate on the "actionable_feedback" field.
func ActionableFeedbackNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldActionableFeedback))
}

// ActionableFeedbackEqualFold applies the EqualFold predicate on the "actionable_feedback" field.
func ActionableFeedbackEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldActionableFeedback, v))
}

// ActionableFeedbackContainsFold applies the ContainsFold predicate on the "actionable_feedback" field.
func ActionableFeedbackContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldActionableFeedback, v))
}

// FinalCommentEQ applies the EQ predicate on the "final_comment" field.
func FinalCommentEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEQ(FieldFinalComment, v))
}

// FinalCommentNEQ applies the NEQ predicate on the "final_comment" field.
func FinalCommentNEQ(v string) predicate.Interview {
	return predicate.Interview(sql.FieldNEQ(FieldFinalComment, v))
}

// FinalCommentIn applies the In predicate on the "final_comment" field.
func FinalCommentIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldIn(FieldFinalComment, vs...))
}

// FinalCommentNotIn applies the NotIn predicate on the "final_comment" field.
func FinalCommentNotIn(vs ...string) predicate.Interview {
	return predicate.Interview(sql.FieldNotIn(FieldFinalComment, vs...))
}

// FinalCommentGT applies the GT predicate on the "final_comment" field.
func FinalCommentGT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGT(FieldFinalComment, v))
}

// FinalCommentGTE applies the GTE predicate on the "final_comment" field.
func FinalCommentGTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldGTE(FieldFinalComment, v))
}

// FinalCommentLT applies the LT predicate on the "final_comment" field.
func FinalCommentLT(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLT(FieldFinalComment, v))
}

// FinalCommentLTE applies the LTE predicate on the "final_comment" field.
func FinalCommentLTE(v string) predicate.Interview {
	return predicate.Interview(sql.FieldLTE(FieldFinalComment, v))
}

// FinalCommentContains applies the Contains predicate on the "final_comment" field.
func FinalCommentContains(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContains(FieldFinalComment, v))
}

// FinalCommentHasPrefix applies the HasPrefix predicate on the "final_comment" field.
func FinalCommentHasPrefix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasPrefix(FieldFinalComment, v))
}

// FinalCommentHasSuffix applies the HasSuffix predicate on the "final_comment" field.
func FinalCommentHasSuffix(v string) predicate.Interview {
	return predicate.Interview(sql.FieldHasSuffix(FieldFinalComment, v))
}

// FinalCommentIsNil applies the IsNil predicate on the "final_comment" field.
func FinalCommentIsNil() predicate.Interview {
	return predicate.Interview(sql.FieldIsNull(FieldFinalComment))
}

// FinalCommentNotNil applies the NotNil predicate on the "final_comment" field.
func FinalCommentNotNil() predicate.Interview {
	return predicate.Interview(sql.FieldNotNull(FieldFinalComment))
}

// FinalCommentEqualFold applies the EqualFold predicate on the "final_comment" field.
func FinalCommentEqualFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldEqualFold(FieldFinalComment, v))
}

// FinalCommentContainsFold applies the ContainsFold predicate on the "final_comment" field.
func FinalCommentContainsFold(v string) predicate.Interview {
	return predicate.Interview(sql.FieldContainsFold(FieldFinalComment, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...irelia.InterviewStatus) predicate.Interview {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Interview(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...irelia.InterviewStatus) predicate.Interview {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Interview(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v irelia.InterviewStatus) predicate.Interview {
	vc := int32(v)
	return predicate.Interview(sql.FieldLTE(FieldStatus, vc))
}

// HasQuestions applies the HasEdge predicate on the "questions" edge.
func HasQuestions() predicate.Interview {
	return predicate.Interview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionsWith applies the HasEdge predicate on the "questions" edge with a given conditions (other predicates).
func HasQuestionsWith(preds ...predicate.Question) predicate.Interview {
	return predicate.Interview(func(s *sql.Selector) {
		step := newQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavorites applies the HasEdge predicate on the "favorites" edge.
func HasFavorites() predicate.Interview {
	return predicate.Interview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavoritesTable, FavoritesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoritesWith applies the HasEdge predicate on the "favorites" edge with a given conditions (other predicates).
func HasFavoritesWith(preds ...predicate.InterviewFavorite) predicate.Interview {
	return predicate.Interview(func(s *sql.Selector) {
		step := newFavoritesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Interview) predicate.Interview {
	return predicate.Interview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Interview) predicate.Interview {
	return predicate.Interview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Interview) predicate.Interview {
	return predicate.Interview(sql.NotPredicates(p))
}
