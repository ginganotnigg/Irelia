// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InterviewFavorite is the model entity for the InterviewFavorite schema.
type InterviewFavorite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// InterviewID holds the value of the "interview_id" field.
	InterviewID string `json:"interview_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InterviewFavoriteQuery when eager-loading is set.
	Edges        InterviewFavoriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InterviewFavoriteEdges holds the relations/edges for other nodes in the graph.
type InterviewFavoriteEdges struct {
	// Interview holds the value of the interview edge.
	Interview *Interview `json:"interview,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InterviewOrErr returns the Interview value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InterviewFavoriteEdges) InterviewOrErr() (*Interview, error) {
	if e.Interview != nil {
		return e.Interview, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: interview.Label}
	}
	return nil, &NotLoadedError{edge: "interview"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InterviewFavorite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case interviewfavorite.FieldID, interviewfavorite.FieldUserID:
			values[i] = new(sql.NullInt64)
		case interviewfavorite.FieldInterviewID:
			values[i] = new(sql.NullString)
		case interviewfavorite.FieldCreatedAt, interviewfavorite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InterviewFavorite fields.
func (_if *InterviewFavorite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case interviewfavorite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_if.ID = int(value.Int64)
		case interviewfavorite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_if.CreatedAt = value.Time
			}
		case interviewfavorite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_if.UpdatedAt = value.Time
			}
		case interviewfavorite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_if.UserID = uint64(value.Int64)
			}
		case interviewfavorite.FieldInterviewID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interview_id", values[i])
			} else if value.Valid {
				_if.InterviewID = value.String
			}
		default:
			_if.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InterviewFavorite.
// This includes values selected through modifiers, order, etc.
func (_if *InterviewFavorite) Value(name string) (ent.Value, error) {
	return _if.selectValues.Get(name)
}

// QueryInterview queries the "interview" edge of the InterviewFavorite entity.
func (_if *InterviewFavorite) QueryInterview() *InterviewQuery {
	return NewInterviewFavoriteClient(_if.config).QueryInterview(_if)
}

// Update returns a builder for updating this InterviewFavorite.
// Note that you need to call InterviewFavorite.Unwrap() before calling this method if this InterviewFavorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (_if *InterviewFavorite) Update() *InterviewFavoriteUpdateOne {
	return NewInterviewFavoriteClient(_if.config).UpdateOne(_if)
}

// Unwrap unwraps the InterviewFavorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_if *InterviewFavorite) Unwrap() *InterviewFavorite {
	_tx, ok := _if.config.driver.(*txDriver)
	if !ok {
		panic("ent: InterviewFavorite is not a transactional entity")
	}
	_if.config.driver = _tx.drv
	return _if
}

// String implements the fmt.Stringer.
func (_if *InterviewFavorite) String() string {
	var builder strings.Builder
	builder.WriteString("InterviewFavorite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _if.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_if.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_if.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _if.UserID))
	builder.WriteString(", ")
	builder.WriteString("interview_id=")
	builder.WriteString(_if.InterviewID)
	builder.WriteByte(')')
	return builder.String()
}

// InterviewFavorites is a parsable slice of InterviewFavorite.
type InterviewFavorites []*InterviewFavorite
