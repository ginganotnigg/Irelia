// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"irelia/pkg/ent/migrate"

	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"irelia/pkg/ent/publicquestion"
	"irelia/pkg/ent/question"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Interview is the client for interacting with the Interview builders.
	Interview *InterviewClient
	// InterviewFavorite is the client for interacting with the InterviewFavorite builders.
	InterviewFavorite *InterviewFavoriteClient
	// PublicQuestion is the client for interacting with the PublicQuestion builders.
	PublicQuestion *PublicQuestionClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Interview = NewInterviewClient(c.config)
	c.InterviewFavorite = NewInterviewFavoriteClient(c.config)
	c.PublicQuestion = NewPublicQuestionClient(c.config)
	c.Question = NewQuestionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Interview:         NewInterviewClient(cfg),
		InterviewFavorite: NewInterviewFavoriteClient(cfg),
		PublicQuestion:    NewPublicQuestionClient(cfg),
		Question:          NewQuestionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Interview:         NewInterviewClient(cfg),
		InterviewFavorite: NewInterviewFavoriteClient(cfg),
		PublicQuestion:    NewPublicQuestionClient(cfg),
		Question:          NewQuestionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Interview.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Interview.Use(hooks...)
	c.InterviewFavorite.Use(hooks...)
	c.PublicQuestion.Use(hooks...)
	c.Question.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Interview.Intercept(interceptors...)
	c.InterviewFavorite.Intercept(interceptors...)
	c.PublicQuestion.Intercept(interceptors...)
	c.Question.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *InterviewMutation:
		return c.Interview.mutate(ctx, m)
	case *InterviewFavoriteMutation:
		return c.InterviewFavorite.mutate(ctx, m)
	case *PublicQuestionMutation:
		return c.PublicQuestion.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// InterviewClient is a client for the Interview schema.
type InterviewClient struct {
	config
}

// NewInterviewClient returns a client for the Interview from the given config.
func NewInterviewClient(c config) *InterviewClient {
	return &InterviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `interview.Hooks(f(g(h())))`.
func (c *InterviewClient) Use(hooks ...Hook) {
	c.hooks.Interview = append(c.hooks.Interview, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `interview.Intercept(f(g(h())))`.
func (c *InterviewClient) Intercept(interceptors ...Interceptor) {
	c.inters.Interview = append(c.inters.Interview, interceptors...)
}

// Create returns a builder for creating a Interview entity.
func (c *InterviewClient) Create() *InterviewCreate {
	mutation := newInterviewMutation(c.config, OpCreate)
	return &InterviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Interview entities.
func (c *InterviewClient) CreateBulk(builders ...*InterviewCreate) *InterviewCreateBulk {
	return &InterviewCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InterviewClient) MapCreateBulk(slice any, setFunc func(*InterviewCreate, int)) *InterviewCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InterviewCreateBulk{err: fmt.Errorf("calling to InterviewClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InterviewCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InterviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Interview.
func (c *InterviewClient) Update() *InterviewUpdate {
	mutation := newInterviewMutation(c.config, OpUpdate)
	return &InterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InterviewClient) UpdateOne(i *Interview) *InterviewUpdateOne {
	mutation := newInterviewMutation(c.config, OpUpdateOne, withInterview(i))
	return &InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InterviewClient) UpdateOneID(id string) *InterviewUpdateOne {
	mutation := newInterviewMutation(c.config, OpUpdateOne, withInterviewID(id))
	return &InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Interview.
func (c *InterviewClient) Delete() *InterviewDelete {
	mutation := newInterviewMutation(c.config, OpDelete)
	return &InterviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InterviewClient) DeleteOne(i *Interview) *InterviewDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InterviewClient) DeleteOneID(id string) *InterviewDeleteOne {
	builder := c.Delete().Where(interview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InterviewDeleteOne{builder}
}

// Query returns a query builder for Interview.
func (c *InterviewClient) Query() *InterviewQuery {
	return &InterviewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInterview},
		inters: c.Interceptors(),
	}
}

// Get returns a Interview entity by its id.
func (c *InterviewClient) Get(ctx context.Context, id string) (*Interview, error) {
	return c.Query().Where(interview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InterviewClient) GetX(ctx context.Context, id string) *Interview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestions queries the questions edge of a Interview.
func (c *InterviewClient) QueryQuestions(i *Interview) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interview.Table, interview.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, interview.QuestionsTable, interview.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavorites queries the favorites edge of a Interview.
func (c *InterviewClient) QueryFavorites(i *Interview) *InterviewFavoriteQuery {
	query := (&InterviewFavoriteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interview.Table, interview.FieldID, id),
			sqlgraph.To(interviewfavorite.Table, interviewfavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, interview.FavoritesTable, interview.FavoritesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InterviewClient) Hooks() []Hook {
	return c.hooks.Interview
}

// Interceptors returns the client interceptors.
func (c *InterviewClient) Interceptors() []Interceptor {
	return c.inters.Interview
}

func (c *InterviewClient) mutate(ctx context.Context, m *InterviewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InterviewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InterviewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Interview mutation op: %q", m.Op())
	}
}

// InterviewFavoriteClient is a client for the InterviewFavorite schema.
type InterviewFavoriteClient struct {
	config
}

// NewInterviewFavoriteClient returns a client for the InterviewFavorite from the given config.
func NewInterviewFavoriteClient(c config) *InterviewFavoriteClient {
	return &InterviewFavoriteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `interviewfavorite.Hooks(f(g(h())))`.
func (c *InterviewFavoriteClient) Use(hooks ...Hook) {
	c.hooks.InterviewFavorite = append(c.hooks.InterviewFavorite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `interviewfavorite.Intercept(f(g(h())))`.
func (c *InterviewFavoriteClient) Intercept(interceptors ...Interceptor) {
	c.inters.InterviewFavorite = append(c.inters.InterviewFavorite, interceptors...)
}

// Create returns a builder for creating a InterviewFavorite entity.
func (c *InterviewFavoriteClient) Create() *InterviewFavoriteCreate {
	mutation := newInterviewFavoriteMutation(c.config, OpCreate)
	return &InterviewFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InterviewFavorite entities.
func (c *InterviewFavoriteClient) CreateBulk(builders ...*InterviewFavoriteCreate) *InterviewFavoriteCreateBulk {
	return &InterviewFavoriteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InterviewFavoriteClient) MapCreateBulk(slice any, setFunc func(*InterviewFavoriteCreate, int)) *InterviewFavoriteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InterviewFavoriteCreateBulk{err: fmt.Errorf("calling to InterviewFavoriteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InterviewFavoriteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InterviewFavoriteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InterviewFavorite.
func (c *InterviewFavoriteClient) Update() *InterviewFavoriteUpdate {
	mutation := newInterviewFavoriteMutation(c.config, OpUpdate)
	return &InterviewFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InterviewFavoriteClient) UpdateOne(_if *InterviewFavorite) *InterviewFavoriteUpdateOne {
	mutation := newInterviewFavoriteMutation(c.config, OpUpdateOne, withInterviewFavorite(_if))
	return &InterviewFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InterviewFavoriteClient) UpdateOneID(id int) *InterviewFavoriteUpdateOne {
	mutation := newInterviewFavoriteMutation(c.config, OpUpdateOne, withInterviewFavoriteID(id))
	return &InterviewFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InterviewFavorite.
func (c *InterviewFavoriteClient) Delete() *InterviewFavoriteDelete {
	mutation := newInterviewFavoriteMutation(c.config, OpDelete)
	return &InterviewFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InterviewFavoriteClient) DeleteOne(_if *InterviewFavorite) *InterviewFavoriteDeleteOne {
	return c.DeleteOneID(_if.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InterviewFavoriteClient) DeleteOneID(id int) *InterviewFavoriteDeleteOne {
	builder := c.Delete().Where(interviewfavorite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InterviewFavoriteDeleteOne{builder}
}

// Query returns a query builder for InterviewFavorite.
func (c *InterviewFavoriteClient) Query() *InterviewFavoriteQuery {
	return &InterviewFavoriteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInterviewFavorite},
		inters: c.Interceptors(),
	}
}

// Get returns a InterviewFavorite entity by its id.
func (c *InterviewFavoriteClient) Get(ctx context.Context, id int) (*InterviewFavorite, error) {
	return c.Query().Where(interviewfavorite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InterviewFavoriteClient) GetX(ctx context.Context, id int) *InterviewFavorite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInterview queries the interview edge of a InterviewFavorite.
func (c *InterviewFavoriteClient) QueryInterview(_if *InterviewFavorite) *InterviewQuery {
	query := (&InterviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _if.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interviewfavorite.Table, interviewfavorite.FieldID, id),
			sqlgraph.To(interview.Table, interview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interviewfavorite.InterviewTable, interviewfavorite.InterviewColumn),
		)
		fromV = sqlgraph.Neighbors(_if.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InterviewFavoriteClient) Hooks() []Hook {
	return c.hooks.InterviewFavorite
}

// Interceptors returns the client interceptors.
func (c *InterviewFavoriteClient) Interceptors() []Interceptor {
	return c.inters.InterviewFavorite
}

func (c *InterviewFavoriteClient) mutate(ctx context.Context, m *InterviewFavoriteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InterviewFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InterviewFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InterviewFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InterviewFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InterviewFavorite mutation op: %q", m.Op())
	}
}

// PublicQuestionClient is a client for the PublicQuestion schema.
type PublicQuestionClient struct {
	config
}

// NewPublicQuestionClient returns a client for the PublicQuestion from the given config.
func NewPublicQuestionClient(c config) *PublicQuestionClient {
	return &PublicQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publicquestion.Hooks(f(g(h())))`.
func (c *PublicQuestionClient) Use(hooks ...Hook) {
	c.hooks.PublicQuestion = append(c.hooks.PublicQuestion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publicquestion.Intercept(f(g(h())))`.
func (c *PublicQuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PublicQuestion = append(c.inters.PublicQuestion, interceptors...)
}

// Create returns a builder for creating a PublicQuestion entity.
func (c *PublicQuestionClient) Create() *PublicQuestionCreate {
	mutation := newPublicQuestionMutation(c.config, OpCreate)
	return &PublicQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PublicQuestion entities.
func (c *PublicQuestionClient) CreateBulk(builders ...*PublicQuestionCreate) *PublicQuestionCreateBulk {
	return &PublicQuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicQuestionClient) MapCreateBulk(slice any, setFunc func(*PublicQuestionCreate, int)) *PublicQuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicQuestionCreateBulk{err: fmt.Errorf("calling to PublicQuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicQuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PublicQuestion.
func (c *PublicQuestionClient) Update() *PublicQuestionUpdate {
	mutation := newPublicQuestionMutation(c.config, OpUpdate)
	return &PublicQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicQuestionClient) UpdateOne(pq *PublicQuestion) *PublicQuestionUpdateOne {
	mutation := newPublicQuestionMutation(c.config, OpUpdateOne, withPublicQuestion(pq))
	return &PublicQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicQuestionClient) UpdateOneID(id int) *PublicQuestionUpdateOne {
	mutation := newPublicQuestionMutation(c.config, OpUpdateOne, withPublicQuestionID(id))
	return &PublicQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PublicQuestion.
func (c *PublicQuestionClient) Delete() *PublicQuestionDelete {
	mutation := newPublicQuestionMutation(c.config, OpDelete)
	return &PublicQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicQuestionClient) DeleteOne(pq *PublicQuestion) *PublicQuestionDeleteOne {
	return c.DeleteOneID(pq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicQuestionClient) DeleteOneID(id int) *PublicQuestionDeleteOne {
	builder := c.Delete().Where(publicquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicQuestionDeleteOne{builder}
}

// Query returns a query builder for PublicQuestion.
func (c *PublicQuestionClient) Query() *PublicQuestionQuery {
	return &PublicQuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublicQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a PublicQuestion entity by its id.
func (c *PublicQuestionClient) Get(ctx context.Context, id int) (*PublicQuestion, error) {
	return c.Query().Where(publicquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicQuestionClient) GetX(ctx context.Context, id int) *PublicQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PublicQuestionClient) Hooks() []Hook {
	return c.hooks.PublicQuestion
}

// Interceptors returns the client interceptors.
func (c *PublicQuestionClient) Interceptors() []Interceptor {
	return c.inters.PublicQuestion
}

func (c *PublicQuestionClient) mutate(ctx context.Context, m *PublicQuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PublicQuestion mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionClient) MapCreateBulk(slice any, setFunc func(*QuestionCreate, int)) *QuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionCreateBulk{err: fmt.Errorf("calling to QuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id int) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id int) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id int) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id int) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInterview queries the interview edge of a Question.
func (c *QuestionClient) QueryInterview(q *Question) *InterviewQuery {
	query := (&InterviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(interview.Table, interview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, question.InterviewTable, question.InterviewColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	return c.hooks.Question
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Question mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Interview, InterviewFavorite, PublicQuestion, Question []ent.Hook
	}
	inters struct {
		Interview, InterviewFavorite, PublicQuestion, Question []ent.Interceptor
	}
)
