// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	irelia "irelia/api"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/question"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionCreate) SetUpdatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableUpdatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetInterviewID sets the "interview_id" field.
func (qc *QuestionCreate) SetInterviewID(s string) *QuestionCreate {
	qc.mutation.SetInterviewID(s)
	return qc
}

// SetQuestionIndex sets the "question_index" field.
func (qc *QuestionCreate) SetQuestionIndex(i int32) *QuestionCreate {
	qc.mutation.SetQuestionIndex(i)
	return qc
}

// SetContent sets the "content" field.
func (qc *QuestionCreate) SetContent(s string) *QuestionCreate {
	qc.mutation.SetContent(s)
	return qc
}

// SetAudio sets the "audio" field.
func (qc *QuestionCreate) SetAudio(s string) *QuestionCreate {
	qc.mutation.SetAudio(s)
	return qc
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableAudio(s *string) *QuestionCreate {
	if s != nil {
		qc.SetAudio(*s)
	}
	return qc
}

// SetLipsync sets the "lipsync" field.
func (qc *QuestionCreate) SetLipsync(isd *irelia.LipSyncData) *QuestionCreate {
	qc.mutation.SetLipsync(isd)
	return qc
}

// SetAnswer sets the "answer" field.
func (qc *QuestionCreate) SetAnswer(s string) *QuestionCreate {
	qc.mutation.SetAnswer(s)
	return qc
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableAnswer(s *string) *QuestionCreate {
	if s != nil {
		qc.SetAnswer(*s)
	}
	return qc
}

// SetRecordProof sets the "record_proof" field.
func (qc *QuestionCreate) SetRecordProof(s string) *QuestionCreate {
	qc.mutation.SetRecordProof(s)
	return qc
}

// SetNillableRecordProof sets the "record_proof" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableRecordProof(s *string) *QuestionCreate {
	if s != nil {
		qc.SetRecordProof(*s)
	}
	return qc
}

// SetComment sets the "comment" field.
func (qc *QuestionCreate) SetComment(s string) *QuestionCreate {
	qc.mutation.SetComment(s)
	return qc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableComment(s *string) *QuestionCreate {
	if s != nil {
		qc.SetComment(*s)
	}
	return qc
}

// SetScore sets the "score" field.
func (qc *QuestionCreate) SetScore(s string) *QuestionCreate {
	qc.mutation.SetScore(s)
	return qc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableScore(s *string) *QuestionCreate {
	if s != nil {
		qc.SetScore(*s)
	}
	return qc
}

// SetStatus sets the "status" field.
func (qc *QuestionCreate) SetStatus(is irelia.QuestionStatus) *QuestionCreate {
	qc.mutation.SetStatus(is)
	return qc
}

// SetInterview sets the "interview" edge to the Interview entity.
func (qc *QuestionCreate) SetInterview(i *Interview) *QuestionCreate {
	return qc.SetInterviewID(i.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := question.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		v := question.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Question.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Question.updated_at"`)}
	}
	if _, ok := qc.mutation.InterviewID(); !ok {
		return &ValidationError{Name: "interview_id", err: errors.New(`ent: missing required field "Question.interview_id"`)}
	}
	if v, ok := qc.mutation.InterviewID(); ok {
		if err := question.InterviewIDValidator(v); err != nil {
			return &ValidationError{Name: "interview_id", err: fmt.Errorf(`ent: validator failed for field "Question.interview_id": %w`, err)}
		}
	}
	if _, ok := qc.mutation.QuestionIndex(); !ok {
		return &ValidationError{Name: "question_index", err: errors.New(`ent: missing required field "Question.question_index"`)}
	}
	if _, ok := qc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Question.content"`)}
	}
	if v, ok := qc.mutation.Content(); ok {
		if err := question.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Question.content": %w`, err)}
		}
	}
	if _, ok := qc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Question.status"`)}
	}
	if len(qc.mutation.InterviewIDs()) == 0 {
		return &ValidationError{Name: "interview", err: errors.New(`ent: missing required edge "Question.interview"`)}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	)
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.QuestionIndex(); ok {
		_spec.SetField(question.FieldQuestionIndex, field.TypeInt32, value)
		_node.QuestionIndex = value
	}
	if value, ok := qc.mutation.Content(); ok {
		_spec.SetField(question.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := qc.mutation.Audio(); ok {
		_spec.SetField(question.FieldAudio, field.TypeString, value)
		_node.Audio = value
	}
	if value, ok := qc.mutation.Lipsync(); ok {
		_spec.SetField(question.FieldLipsync, field.TypeJSON, value)
		_node.Lipsync = value
	}
	if value, ok := qc.mutation.Answer(); ok {
		_spec.SetField(question.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if value, ok := qc.mutation.RecordProof(); ok {
		_spec.SetField(question.FieldRecordProof, field.TypeString, value)
		_node.RecordProof = value
	}
	if value, ok := qc.mutation.Comment(); ok {
		_spec.SetField(question.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := qc.mutation.Score(); ok {
		_spec.SetField(question.FieldScore, field.TypeString, value)
		_node.Score = value
	}
	if value, ok := qc.mutation.Status(); ok {
		_spec.SetField(question.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if nodes := qc.mutation.InterviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.InterviewTable,
			Columns: []string{question.InterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InterviewID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
