// Code generated by ent, DO NOT EDIT.

package interviewfavorite

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the interviewfavorite type in the database.
	Label = "interview_favorite"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldInterviewID holds the string denoting the interview_id field in the database.
	FieldInterviewID = "interview_id"
	// EdgeInterview holds the string denoting the interview edge name in mutations.
	EdgeInterview = "interview"
	// Table holds the table name of the interviewfavorite in the database.
	Table = "interview_favorites"
	// InterviewTable is the table that holds the interview relation/edge.
	InterviewTable = "interview_favorites"
	// InterviewInverseTable is the table name for the Interview entity.
	// It exists in this package in order to avoid circular dependency with the "interview" package.
	InterviewInverseTable = "interviews"
	// InterviewColumn is the table column denoting the interview relation/edge.
	InterviewColumn = "interview_id"
)

// Columns holds all SQL columns for interviewfavorite fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldInterviewID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the InterviewFavorite queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByInterviewID orders the results by the interview_id field.
func ByInterviewID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterviewID, opts...).ToFunc()
}

// ByInterviewField orders the results by interview field.
func ByInterviewField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInterviewStep(), sql.OrderByField(field, opts...))
	}
}
func newInterviewStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InterviewInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InterviewTable, InterviewColumn),
	)
}
