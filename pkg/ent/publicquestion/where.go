// Code generated by ent, DO NOT EDIT.

package publicquestion

import (
	"irelia/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldPosition, v))
}

// Experience applies equality check predicate on the "experience" field. It's identical to ExperienceEQ.
func Experience(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldExperience, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldLanguage, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldContent, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldAnswer, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldUpdatedAt, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContainsFold(FieldPosition, v))
}

// ExperienceEQ applies the EQ predicate on the "experience" field.
func ExperienceEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldExperience, v))
}

// ExperienceNEQ applies the NEQ predicate on the "experience" field.
func ExperienceNEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldExperience, v))
}

// ExperienceIn applies the In predicate on the "experience" field.
func ExperienceIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldExperience, vs...))
}

// ExperienceNotIn applies the NotIn predicate on the "experience" field.
func ExperienceNotIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldExperience, vs...))
}

// ExperienceGT applies the GT predicate on the "experience" field.
func ExperienceGT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldExperience, v))
}

// ExperienceGTE applies the GTE predicate on the "experience" field.
func ExperienceGTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldExperience, v))
}

// ExperienceLT applies the LT predicate on the "experience" field.
func ExperienceLT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldExperience, v))
}

// ExperienceLTE applies the LTE predicate on the "experience" field.
func ExperienceLTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldExperience, v))
}

// ExperienceContains applies the Contains predicate on the "experience" field.
func ExperienceContains(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContains(FieldExperience, v))
}

// ExperienceHasPrefix applies the HasPrefix predicate on the "experience" field.
func ExperienceHasPrefix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasPrefix(FieldExperience, v))
}

// ExperienceHasSuffix applies the HasSuffix predicate on the "experience" field.
func ExperienceHasSuffix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasSuffix(FieldExperience, v))
}

// ExperienceEqualFold applies the EqualFold predicate on the "experience" field.
func ExperienceEqualFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEqualFold(FieldExperience, v))
}

// ExperienceContainsFold applies the ContainsFold predicate on the "experience" field.
func ExperienceContainsFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContainsFold(FieldExperience, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContainsFold(FieldLanguage, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContainsFold(FieldContent, v))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerIsNil applies the IsNil predicate on the "answer" field.
func AnswerIsNil() predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldIsNull(FieldAnswer))
}

// AnswerNotNil applies the NotNil predicate on the "answer" field.
func AnswerNotNil() predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldNotNull(FieldAnswer))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.FieldContainsFold(FieldAnswer, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PublicQuestion) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PublicQuestion) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PublicQuestion) predicate.PublicQuestion {
	return predicate.PublicQuestion(sql.NotPredicates(p))
}
