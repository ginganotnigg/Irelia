// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	irelia "irelia/api"
	"irelia/pkg/ent/interview"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Interview is the model entity for the Interview schema.
type Interview struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Experience holds the value of the "experience" field.
	Experience string `json:"experience,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// VoiceID holds the value of the "voice_id" field.
	VoiceID string `json:"voice_id,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed int32 `json:"speed,omitempty"`
	// Skills holds the value of the "skills" field.
	Skills []string `json:"skills,omitempty"`
	// SkillsScore holds the value of the "skills_score" field.
	SkillsScore []string `json:"skills_score,omitempty"`
	// SkipCode holds the value of the "skip_code" field.
	SkipCode bool `json:"skip_code,omitempty"`
	// TotalQuestions holds the value of the "total_questions" field.
	TotalQuestions int32 `json:"total_questions,omitempty"`
	// RemainingQuestions holds the value of the "remaining_questions" field.
	RemainingQuestions int32 `json:"remaining_questions,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore *irelia.TotalScore `json:"total_score,omitempty"`
	// PositiveFeedback holds the value of the "positive_feedback" field.
	PositiveFeedback string `json:"positive_feedback,omitempty"`
	// ActionableFeedback holds the value of the "actionable_feedback" field.
	ActionableFeedback string `json:"actionable_feedback,omitempty"`
	// FinalComment holds the value of the "final_comment" field.
	FinalComment string `json:"final_comment,omitempty"`
	// Status holds the value of the "status" field.
	Status irelia.InterviewStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InterviewQuery when eager-loading is set.
	Edges        InterviewEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InterviewEdges holds the relations/edges for other nodes in the graph.
type InterviewEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// Favorites holds the value of the favorites edge.
	Favorites []*InterviewFavorite `json:"favorites,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e InterviewEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// FavoritesOrErr returns the Favorites value or an error if the edge
// was not loaded in eager-loading.
func (e InterviewEdges) FavoritesOrErr() ([]*InterviewFavorite, error) {
	if e.loadedTypes[1] {
		return e.Favorites, nil
	}
	return nil, &NotLoadedError{edge: "favorites"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Interview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case interview.FieldSkills, interview.FieldSkillsScore, interview.FieldTotalScore:
			values[i] = new([]byte)
		case interview.FieldSkipCode:
			values[i] = new(sql.NullBool)
		case interview.FieldUserID, interview.FieldSpeed, interview.FieldTotalQuestions, interview.FieldRemainingQuestions, interview.FieldStatus:
			values[i] = new(sql.NullInt64)
		case interview.FieldID, interview.FieldPosition, interview.FieldExperience, interview.FieldLanguage, interview.FieldVoiceID, interview.FieldPositiveFeedback, interview.FieldActionableFeedback, interview.FieldFinalComment:
			values[i] = new(sql.NullString)
		case interview.FieldCreatedAt, interview.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Interview fields.
func (i *Interview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case interview.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case interview.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case interview.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case interview.FieldUserID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value.Valid {
				i.UserID = uint64(value.Int64)
			}
		case interview.FieldPosition:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[j])
			} else if value.Valid {
				i.Position = value.String
			}
		case interview.FieldExperience:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field experience", values[j])
			} else if value.Valid {
				i.Experience = value.String
			}
		case interview.FieldLanguage:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[j])
			} else if value.Valid {
				i.Language = value.String
			}
		case interview.FieldVoiceID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field voice_id", values[j])
			} else if value.Valid {
				i.VoiceID = value.String
			}
		case interview.FieldSpeed:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[j])
			} else if value.Valid {
				i.Speed = int32(value.Int64)
			}
		case interview.FieldSkills:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Skills); err != nil {
					return fmt.Errorf("unmarshal field skills: %w", err)
				}
			}
		case interview.FieldSkillsScore:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skills_score", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.SkillsScore); err != nil {
					return fmt.Errorf("unmarshal field skills_score: %w", err)
				}
			}
		case interview.FieldSkipCode:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field skip_code", values[j])
			} else if value.Valid {
				i.SkipCode = value.Bool
			}
		case interview.FieldTotalQuestions:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_questions", values[j])
			} else if value.Valid {
				i.TotalQuestions = int32(value.Int64)
			}
		case interview.FieldRemainingQuestions:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining_questions", values[j])
			} else if value.Valid {
				i.RemainingQuestions = int32(value.Int64)
			}
		case interview.FieldTotalScore:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.TotalScore); err != nil {
					return fmt.Errorf("unmarshal field total_score: %w", err)
				}
			}
		case interview.FieldPositiveFeedback:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field positive_feedback", values[j])
			} else if value.Valid {
				i.PositiveFeedback = value.String
			}
		case interview.FieldActionableFeedback:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field actionable_feedback", values[j])
			} else if value.Valid {
				i.ActionableFeedback = value.String
			}
		case interview.FieldFinalComment:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field final_comment", values[j])
			} else if value.Valid {
				i.FinalComment = value.String
			}
		case interview.FieldStatus:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = irelia.InterviewStatus(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Interview.
// This includes values selected through modifiers, order, etc.
func (i *Interview) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryQuestions queries the "questions" edge of the Interview entity.
func (i *Interview) QueryQuestions() *QuestionQuery {
	return NewInterviewClient(i.config).QueryQuestions(i)
}

// QueryFavorites queries the "favorites" edge of the Interview entity.
func (i *Interview) QueryFavorites() *InterviewFavoriteQuery {
	return NewInterviewClient(i.config).QueryFavorites(i)
}

// Update returns a builder for updating this Interview.
// Note that you need to call Interview.Unwrap() before calling this method if this Interview
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Interview) Update() *InterviewUpdateOne {
	return NewInterviewClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Interview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Interview) Unwrap() *Interview {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Interview is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Interview) String() string {
	var builder strings.Builder
	builder.WriteString("Interview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(i.Position)
	builder.WriteString(", ")
	builder.WriteString("experience=")
	builder.WriteString(i.Experience)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(i.Language)
	builder.WriteString(", ")
	builder.WriteString("voice_id=")
	builder.WriteString(i.VoiceID)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", i.Speed))
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(fmt.Sprintf("%v", i.Skills))
	builder.WriteString(", ")
	builder.WriteString("skills_score=")
	builder.WriteString(fmt.Sprintf("%v", i.SkillsScore))
	builder.WriteString(", ")
	builder.WriteString("skip_code=")
	builder.WriteString(fmt.Sprintf("%v", i.SkipCode))
	builder.WriteString(", ")
	builder.WriteString("total_questions=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalQuestions))
	builder.WriteString(", ")
	builder.WriteString("remaining_questions=")
	builder.WriteString(fmt.Sprintf("%v", i.RemainingQuestions))
	builder.WriteString(", ")
	builder.WriteString("total_score=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalScore))
	builder.WriteString(", ")
	builder.WriteString("positive_feedback=")
	builder.WriteString(i.PositiveFeedback)
	builder.WriteString(", ")
	builder.WriteString("actionable_feedback=")
	builder.WriteString(i.ActionableFeedback)
	builder.WriteString(", ")
	builder.WriteString("final_comment=")
	builder.WriteString(i.FinalComment)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Interviews is a parsable slice of Interview.
type Interviews []*Interview
