// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"irelia/pkg/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InterviewFavoriteQuery is the builder for querying InterviewFavorite entities.
type InterviewFavoriteQuery struct {
	config
	ctx           *QueryContext
	order         []interviewfavorite.OrderOption
	inters        []Interceptor
	predicates    []predicate.InterviewFavorite
	withInterview *InterviewQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InterviewFavoriteQuery builder.
func (ifq *InterviewFavoriteQuery) Where(ps ...predicate.InterviewFavorite) *InterviewFavoriteQuery {
	ifq.predicates = append(ifq.predicates, ps...)
	return ifq
}

// Limit the number of records to be returned by this query.
func (ifq *InterviewFavoriteQuery) Limit(limit int) *InterviewFavoriteQuery {
	ifq.ctx.Limit = &limit
	return ifq
}

// Offset to start from.
func (ifq *InterviewFavoriteQuery) Offset(offset int) *InterviewFavoriteQuery {
	ifq.ctx.Offset = &offset
	return ifq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ifq *InterviewFavoriteQuery) Unique(unique bool) *InterviewFavoriteQuery {
	ifq.ctx.Unique = &unique
	return ifq
}

// Order specifies how the records should be ordered.
func (ifq *InterviewFavoriteQuery) Order(o ...interviewfavorite.OrderOption) *InterviewFavoriteQuery {
	ifq.order = append(ifq.order, o...)
	return ifq
}

// QueryInterview chains the current query on the "interview" edge.
func (ifq *InterviewFavoriteQuery) QueryInterview() *InterviewQuery {
	query := (&InterviewClient{config: ifq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ifq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ifq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(interviewfavorite.Table, interviewfavorite.FieldID, selector),
			sqlgraph.To(interview.Table, interview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interviewfavorite.InterviewTable, interviewfavorite.InterviewColumn),
		)
		fromU = sqlgraph.SetNeighbors(ifq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InterviewFavorite entity from the query.
// Returns a *NotFoundError when no InterviewFavorite was found.
func (ifq *InterviewFavoriteQuery) First(ctx context.Context) (*InterviewFavorite, error) {
	nodes, err := ifq.Limit(1).All(setContextOp(ctx, ifq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{interviewfavorite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) FirstX(ctx context.Context) *InterviewFavorite {
	node, err := ifq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InterviewFavorite ID from the query.
// Returns a *NotFoundError when no InterviewFavorite ID was found.
func (ifq *InterviewFavoriteQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifq.Limit(1).IDs(setContextOp(ctx, ifq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{interviewfavorite.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) FirstIDX(ctx context.Context) int {
	id, err := ifq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InterviewFavorite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InterviewFavorite entity is found.
// Returns a *NotFoundError when no InterviewFavorite entities are found.
func (ifq *InterviewFavoriteQuery) Only(ctx context.Context) (*InterviewFavorite, error) {
	nodes, err := ifq.Limit(2).All(setContextOp(ctx, ifq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{interviewfavorite.Label}
	default:
		return nil, &NotSingularError{interviewfavorite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) OnlyX(ctx context.Context) *InterviewFavorite {
	node, err := ifq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InterviewFavorite ID in the query.
// Returns a *NotSingularError when more than one InterviewFavorite ID is found.
// Returns a *NotFoundError when no entities are found.
func (ifq *InterviewFavoriteQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifq.Limit(2).IDs(setContextOp(ctx, ifq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{interviewfavorite.Label}
	default:
		err = &NotSingularError{interviewfavorite.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) OnlyIDX(ctx context.Context) int {
	id, err := ifq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InterviewFavorites.
func (ifq *InterviewFavoriteQuery) All(ctx context.Context) ([]*InterviewFavorite, error) {
	ctx = setContextOp(ctx, ifq.ctx, ent.OpQueryAll)
	if err := ifq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InterviewFavorite, *InterviewFavoriteQuery]()
	return withInterceptors[[]*InterviewFavorite](ctx, ifq, qr, ifq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) AllX(ctx context.Context) []*InterviewFavorite {
	nodes, err := ifq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InterviewFavorite IDs.
func (ifq *InterviewFavoriteQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ifq.ctx.Unique == nil && ifq.path != nil {
		ifq.Unique(true)
	}
	ctx = setContextOp(ctx, ifq.ctx, ent.OpQueryIDs)
	if err = ifq.Select(interviewfavorite.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) IDsX(ctx context.Context) []int {
	ids, err := ifq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ifq *InterviewFavoriteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ifq.ctx, ent.OpQueryCount)
	if err := ifq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ifq, querierCount[*InterviewFavoriteQuery](), ifq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) CountX(ctx context.Context) int {
	count, err := ifq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ifq *InterviewFavoriteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ifq.ctx, ent.OpQueryExist)
	switch _, err := ifq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ifq *InterviewFavoriteQuery) ExistX(ctx context.Context) bool {
	exist, err := ifq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InterviewFavoriteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ifq *InterviewFavoriteQuery) Clone() *InterviewFavoriteQuery {
	if ifq == nil {
		return nil
	}
	return &InterviewFavoriteQuery{
		config:        ifq.config,
		ctx:           ifq.ctx.Clone(),
		order:         append([]interviewfavorite.OrderOption{}, ifq.order...),
		inters:        append([]Interceptor{}, ifq.inters...),
		predicates:    append([]predicate.InterviewFavorite{}, ifq.predicates...),
		withInterview: ifq.withInterview.Clone(),
		// clone intermediate query.
		sql:  ifq.sql.Clone(),
		path: ifq.path,
	}
}

// WithInterview tells the query-builder to eager-load the nodes that are connected to
// the "interview" edge. The optional arguments are used to configure the query builder of the edge.
func (ifq *InterviewFavoriteQuery) WithInterview(opts ...func(*InterviewQuery)) *InterviewFavoriteQuery {
	query := (&InterviewClient{config: ifq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ifq.withInterview = query
	return ifq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InterviewFavorite.Query().
//		GroupBy(interviewfavorite.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ifq *InterviewFavoriteQuery) GroupBy(field string, fields ...string) *InterviewFavoriteGroupBy {
	ifq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InterviewFavoriteGroupBy{build: ifq}
	grbuild.flds = &ifq.ctx.Fields
	grbuild.label = interviewfavorite.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.InterviewFavorite.Query().
//		Select(interviewfavorite.FieldCreatedAt).
//		Scan(ctx, &v)
func (ifq *InterviewFavoriteQuery) Select(fields ...string) *InterviewFavoriteSelect {
	ifq.ctx.Fields = append(ifq.ctx.Fields, fields...)
	sbuild := &InterviewFavoriteSelect{InterviewFavoriteQuery: ifq}
	sbuild.label = interviewfavorite.Label
	sbuild.flds, sbuild.scan = &ifq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InterviewFavoriteSelect configured with the given aggregations.
func (ifq *InterviewFavoriteQuery) Aggregate(fns ...AggregateFunc) *InterviewFavoriteSelect {
	return ifq.Select().Aggregate(fns...)
}

func (ifq *InterviewFavoriteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ifq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ifq); err != nil {
				return err
			}
		}
	}
	for _, f := range ifq.ctx.Fields {
		if !interviewfavorite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ifq.path != nil {
		prev, err := ifq.path(ctx)
		if err != nil {
			return err
		}
		ifq.sql = prev
	}
	return nil
}

func (ifq *InterviewFavoriteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InterviewFavorite, error) {
	var (
		nodes       = []*InterviewFavorite{}
		_spec       = ifq.querySpec()
		loadedTypes = [1]bool{
			ifq.withInterview != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InterviewFavorite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InterviewFavorite{config: ifq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ifq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ifq.withInterview; query != nil {
		if err := ifq.loadInterview(ctx, query, nodes, nil,
			func(n *InterviewFavorite, e *Interview) { n.Edges.Interview = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ifq *InterviewFavoriteQuery) loadInterview(ctx context.Context, query *InterviewQuery, nodes []*InterviewFavorite, init func(*InterviewFavorite), assign func(*InterviewFavorite, *Interview)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*InterviewFavorite)
	for i := range nodes {
		fk := nodes[i].InterviewID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(interview.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "interview_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ifq *InterviewFavoriteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ifq.querySpec()
	_spec.Node.Columns = ifq.ctx.Fields
	if len(ifq.ctx.Fields) > 0 {
		_spec.Unique = ifq.ctx.Unique != nil && *ifq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ifq.driver, _spec)
}

func (ifq *InterviewFavoriteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(interviewfavorite.Table, interviewfavorite.Columns, sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt))
	_spec.From = ifq.sql
	if unique := ifq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ifq.path != nil {
		_spec.Unique = true
	}
	if fields := ifq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interviewfavorite.FieldID)
		for i := range fields {
			if fields[i] != interviewfavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ifq.withInterview != nil {
			_spec.Node.AddColumnOnce(interviewfavorite.FieldInterviewID)
		}
	}
	if ps := ifq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ifq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ifq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ifq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ifq *InterviewFavoriteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ifq.driver.Dialect())
	t1 := builder.Table(interviewfavorite.Table)
	columns := ifq.ctx.Fields
	if len(columns) == 0 {
		columns = interviewfavorite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ifq.sql != nil {
		selector = ifq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ifq.ctx.Unique != nil && *ifq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ifq.predicates {
		p(selector)
	}
	for _, p := range ifq.order {
		p(selector)
	}
	if offset := ifq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ifq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InterviewFavoriteGroupBy is the group-by builder for InterviewFavorite entities.
type InterviewFavoriteGroupBy struct {
	selector
	build *InterviewFavoriteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ifgb *InterviewFavoriteGroupBy) Aggregate(fns ...AggregateFunc) *InterviewFavoriteGroupBy {
	ifgb.fns = append(ifgb.fns, fns...)
	return ifgb
}

// Scan applies the selector query and scans the result into the given value.
func (ifgb *InterviewFavoriteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifgb.build.ctx, ent.OpQueryGroupBy)
	if err := ifgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InterviewFavoriteQuery, *InterviewFavoriteGroupBy](ctx, ifgb.build, ifgb, ifgb.build.inters, v)
}

func (ifgb *InterviewFavoriteGroupBy) sqlScan(ctx context.Context, root *InterviewFavoriteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ifgb.fns))
	for _, fn := range ifgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ifgb.flds)+len(ifgb.fns))
		for _, f := range *ifgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ifgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InterviewFavoriteSelect is the builder for selecting fields of InterviewFavorite entities.
type InterviewFavoriteSelect struct {
	*InterviewFavoriteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ifs *InterviewFavoriteSelect) Aggregate(fns ...AggregateFunc) *InterviewFavoriteSelect {
	ifs.fns = append(ifs.fns, fns...)
	return ifs
}

// Scan applies the selector query and scans the result into the given value.
func (ifs *InterviewFavoriteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifs.ctx, ent.OpQuerySelect)
	if err := ifs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InterviewFavoriteQuery, *InterviewFavoriteSelect](ctx, ifs.InterviewFavoriteQuery, ifs, ifs.inters, v)
}

func (ifs *InterviewFavoriteSelect) sqlScan(ctx context.Context, root *InterviewFavoriteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ifs.fns))
	for _, fn := range ifs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ifs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
