// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"irelia/pkg/ent/predicate"
	"irelia/pkg/ent/publicquestion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicQuestionDelete is the builder for deleting a PublicQuestion entity.
type PublicQuestionDelete struct {
	config
	hooks    []Hook
	mutation *PublicQuestionMutation
}

// Where appends a list predicates to the PublicQuestionDelete builder.
func (pqd *PublicQuestionDelete) Where(ps ...predicate.PublicQuestion) *PublicQuestionDelete {
	pqd.mutation.Where(ps...)
	return pqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pqd *PublicQuestionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pqd.sqlExec, pqd.mutation, pqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pqd *PublicQuestionDelete) ExecX(ctx context.Context) int {
	n, err := pqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pqd *PublicQuestionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(publicquestion.Table, sqlgraph.NewFieldSpec(publicquestion.FieldID, field.TypeInt))
	if ps := pqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pqd.mutation.done = true
	return affected, err
}

// PublicQuestionDeleteOne is the builder for deleting a single PublicQuestion entity.
type PublicQuestionDeleteOne struct {
	pqd *PublicQuestionDelete
}

// Where appends a list predicates to the PublicQuestionDelete builder.
func (pqdo *PublicQuestionDeleteOne) Where(ps ...predicate.PublicQuestion) *PublicQuestionDeleteOne {
	pqdo.pqd.mutation.Where(ps...)
	return pqdo
}

// Exec executes the deletion query.
func (pqdo *PublicQuestionDeleteOne) Exec(ctx context.Context) error {
	n, err := pqdo.pqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{publicquestion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pqdo *PublicQuestionDeleteOne) ExecX(ctx context.Context) {
	if err := pqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
