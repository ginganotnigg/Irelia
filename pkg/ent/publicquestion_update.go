// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"irelia/pkg/ent/predicate"
	"irelia/pkg/ent/publicquestion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicQuestionUpdate is the builder for updating PublicQuestion entities.
type PublicQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *PublicQuestionMutation
}

// Where appends a list predicates to the PublicQuestionUpdate builder.
func (pqu *PublicQuestionUpdate) Where(ps ...predicate.PublicQuestion) *PublicQuestionUpdate {
	pqu.mutation.Where(ps...)
	return pqu
}

// SetUpdatedAt sets the "updated_at" field.
func (pqu *PublicQuestionUpdate) SetUpdatedAt(t time.Time) *PublicQuestionUpdate {
	pqu.mutation.SetUpdatedAt(t)
	return pqu
}

// SetPosition sets the "position" field.
func (pqu *PublicQuestionUpdate) SetPosition(s string) *PublicQuestionUpdate {
	pqu.mutation.SetPosition(s)
	return pqu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pqu *PublicQuestionUpdate) SetNillablePosition(s *string) *PublicQuestionUpdate {
	if s != nil {
		pqu.SetPosition(*s)
	}
	return pqu
}

// SetExperience sets the "experience" field.
func (pqu *PublicQuestionUpdate) SetExperience(s string) *PublicQuestionUpdate {
	pqu.mutation.SetExperience(s)
	return pqu
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (pqu *PublicQuestionUpdate) SetNillableExperience(s *string) *PublicQuestionUpdate {
	if s != nil {
		pqu.SetExperience(*s)
	}
	return pqu
}

// SetLanguage sets the "language" field.
func (pqu *PublicQuestionUpdate) SetLanguage(s string) *PublicQuestionUpdate {
	pqu.mutation.SetLanguage(s)
	return pqu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pqu *PublicQuestionUpdate) SetNillableLanguage(s *string) *PublicQuestionUpdate {
	if s != nil {
		pqu.SetLanguage(*s)
	}
	return pqu
}

// SetContent sets the "content" field.
func (pqu *PublicQuestionUpdate) SetContent(s string) *PublicQuestionUpdate {
	pqu.mutation.SetContent(s)
	return pqu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pqu *PublicQuestionUpdate) SetNillableContent(s *string) *PublicQuestionUpdate {
	if s != nil {
		pqu.SetContent(*s)
	}
	return pqu
}

// SetAnswer sets the "answer" field.
func (pqu *PublicQuestionUpdate) SetAnswer(s string) *PublicQuestionUpdate {
	pqu.mutation.SetAnswer(s)
	return pqu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (pqu *PublicQuestionUpdate) SetNillableAnswer(s *string) *PublicQuestionUpdate {
	if s != nil {
		pqu.SetAnswer(*s)
	}
	return pqu
}

// ClearAnswer clears the value of the "answer" field.
func (pqu *PublicQuestionUpdate) ClearAnswer() *PublicQuestionUpdate {
	pqu.mutation.ClearAnswer()
	return pqu
}

// Mutation returns the PublicQuestionMutation object of the builder.
func (pqu *PublicQuestionUpdate) Mutation() *PublicQuestionMutation {
	return pqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pqu *PublicQuestionUpdate) Save(ctx context.Context) (int, error) {
	pqu.defaults()
	return withHooks(ctx, pqu.sqlSave, pqu.mutation, pqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pqu *PublicQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := pqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pqu *PublicQuestionUpdate) Exec(ctx context.Context) error {
	_, err := pqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqu *PublicQuestionUpdate) ExecX(ctx context.Context) {
	if err := pqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pqu *PublicQuestionUpdate) defaults() {
	if _, ok := pqu.mutation.UpdatedAt(); !ok {
		v := publicquestion.UpdateDefaultUpdatedAt()
		pqu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pqu *PublicQuestionUpdate) check() error {
	if v, ok := pqu.mutation.Position(); ok {
		if err := publicquestion.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.position": %w`, err)}
		}
	}
	if v, ok := pqu.mutation.Experience(); ok {
		if err := publicquestion.ExperienceValidator(v); err != nil {
			return &ValidationError{Name: "experience", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.experience": %w`, err)}
		}
	}
	if v, ok := pqu.mutation.Language(); ok {
		if err := publicquestion.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.language": %w`, err)}
		}
	}
	if v, ok := pqu.mutation.Content(); ok {
		if err := publicquestion.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.content": %w`, err)}
		}
	}
	return nil
}

func (pqu *PublicQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicquestion.Table, publicquestion.Columns, sqlgraph.NewFieldSpec(publicquestion.FieldID, field.TypeInt))
	if ps := pqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pqu.mutation.UpdatedAt(); ok {
		_spec.SetField(publicquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pqu.mutation.Position(); ok {
		_spec.SetField(publicquestion.FieldPosition, field.TypeString, value)
	}
	if value, ok := pqu.mutation.Experience(); ok {
		_spec.SetField(publicquestion.FieldExperience, field.TypeString, value)
	}
	if value, ok := pqu.mutation.Language(); ok {
		_spec.SetField(publicquestion.FieldLanguage, field.TypeString, value)
	}
	if value, ok := pqu.mutation.Content(); ok {
		_spec.SetField(publicquestion.FieldContent, field.TypeString, value)
	}
	if value, ok := pqu.mutation.Answer(); ok {
		_spec.SetField(publicquestion.FieldAnswer, field.TypeString, value)
	}
	if pqu.mutation.AnswerCleared() {
		_spec.ClearField(publicquestion.FieldAnswer, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pqu.mutation.done = true
	return n, nil
}

// PublicQuestionUpdateOne is the builder for updating a single PublicQuestion entity.
type PublicQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicQuestionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pquo *PublicQuestionUpdateOne) SetUpdatedAt(t time.Time) *PublicQuestionUpdateOne {
	pquo.mutation.SetUpdatedAt(t)
	return pquo
}

// SetPosition sets the "position" field.
func (pquo *PublicQuestionUpdateOne) SetPosition(s string) *PublicQuestionUpdateOne {
	pquo.mutation.SetPosition(s)
	return pquo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pquo *PublicQuestionUpdateOne) SetNillablePosition(s *string) *PublicQuestionUpdateOne {
	if s != nil {
		pquo.SetPosition(*s)
	}
	return pquo
}

// SetExperience sets the "experience" field.
func (pquo *PublicQuestionUpdateOne) SetExperience(s string) *PublicQuestionUpdateOne {
	pquo.mutation.SetExperience(s)
	return pquo
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (pquo *PublicQuestionUpdateOne) SetNillableExperience(s *string) *PublicQuestionUpdateOne {
	if s != nil {
		pquo.SetExperience(*s)
	}
	return pquo
}

// SetLanguage sets the "language" field.
func (pquo *PublicQuestionUpdateOne) SetLanguage(s string) *PublicQuestionUpdateOne {
	pquo.mutation.SetLanguage(s)
	return pquo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pquo *PublicQuestionUpdateOne) SetNillableLanguage(s *string) *PublicQuestionUpdateOne {
	if s != nil {
		pquo.SetLanguage(*s)
	}
	return pquo
}

// SetContent sets the "content" field.
func (pquo *PublicQuestionUpdateOne) SetContent(s string) *PublicQuestionUpdateOne {
	pquo.mutation.SetContent(s)
	return pquo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pquo *PublicQuestionUpdateOne) SetNillableContent(s *string) *PublicQuestionUpdateOne {
	if s != nil {
		pquo.SetContent(*s)
	}
	return pquo
}

// SetAnswer sets the "answer" field.
func (pquo *PublicQuestionUpdateOne) SetAnswer(s string) *PublicQuestionUpdateOne {
	pquo.mutation.SetAnswer(s)
	return pquo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (pquo *PublicQuestionUpdateOne) SetNillableAnswer(s *string) *PublicQuestionUpdateOne {
	if s != nil {
		pquo.SetAnswer(*s)
	}
	return pquo
}

// ClearAnswer clears the value of the "answer" field.
func (pquo *PublicQuestionUpdateOne) ClearAnswer() *PublicQuestionUpdateOne {
	pquo.mutation.ClearAnswer()
	return pquo
}

// Mutation returns the PublicQuestionMutation object of the builder.
func (pquo *PublicQuestionUpdateOne) Mutation() *PublicQuestionMutation {
	return pquo.mutation
}

// Where appends a list predicates to the PublicQuestionUpdate builder.
func (pquo *PublicQuestionUpdateOne) Where(ps ...predicate.PublicQuestion) *PublicQuestionUpdateOne {
	pquo.mutation.Where(ps...)
	return pquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pquo *PublicQuestionUpdateOne) Select(field string, fields ...string) *PublicQuestionUpdateOne {
	pquo.fields = append([]string{field}, fields...)
	return pquo
}

// Save executes the query and returns the updated PublicQuestion entity.
func (pquo *PublicQuestionUpdateOne) Save(ctx context.Context) (*PublicQuestion, error) {
	pquo.defaults()
	return withHooks(ctx, pquo.sqlSave, pquo.mutation, pquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pquo *PublicQuestionUpdateOne) SaveX(ctx context.Context) *PublicQuestion {
	node, err := pquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pquo *PublicQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := pquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pquo *PublicQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := pquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pquo *PublicQuestionUpdateOne) defaults() {
	if _, ok := pquo.mutation.UpdatedAt(); !ok {
		v := publicquestion.UpdateDefaultUpdatedAt()
		pquo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pquo *PublicQuestionUpdateOne) check() error {
	if v, ok := pquo.mutation.Position(); ok {
		if err := publicquestion.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.position": %w`, err)}
		}
	}
	if v, ok := pquo.mutation.Experience(); ok {
		if err := publicquestion.ExperienceValidator(v); err != nil {
			return &ValidationError{Name: "experience", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.experience": %w`, err)}
		}
	}
	if v, ok := pquo.mutation.Language(); ok {
		if err := publicquestion.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.language": %w`, err)}
		}
	}
	if v, ok := pquo.mutation.Content(); ok {
		if err := publicquestion.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.content": %w`, err)}
		}
	}
	return nil
}

func (pquo *PublicQuestionUpdateOne) sqlSave(ctx context.Context) (_node *PublicQuestion, err error) {
	if err := pquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicquestion.Table, publicquestion.Columns, sqlgraph.NewFieldSpec(publicquestion.FieldID, field.TypeInt))
	id, ok := pquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicquestion.FieldID)
		for _, f := range fields {
			if !publicquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pquo.mutation.UpdatedAt(); ok {
		_spec.SetField(publicquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pquo.mutation.Position(); ok {
		_spec.SetField(publicquestion.FieldPosition, field.TypeString, value)
	}
	if value, ok := pquo.mutation.Experience(); ok {
		_spec.SetField(publicquestion.FieldExperience, field.TypeString, value)
	}
	if value, ok := pquo.mutation.Language(); ok {
		_spec.SetField(publicquestion.FieldLanguage, field.TypeString, value)
	}
	if value, ok := pquo.mutation.Content(); ok {
		_spec.SetField(publicquestion.FieldContent, field.TypeString, value)
	}
	if value, ok := pquo.mutation.Answer(); ok {
		_spec.SetField(publicquestion.FieldAnswer, field.TypeString, value)
	}
	if pquo.mutation.AnswerCleared() {
		_spec.ClearField(publicquestion.FieldAnswer, field.TypeString)
	}
	_node = &PublicQuestion{config: pquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pquo.mutation.done = true
	return _node, nil
}
