// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	irelia "irelia/api"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"irelia/pkg/ent/question"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InterviewCreate is the builder for creating a Interview entity.
type InterviewCreate struct {
	config
	mutation *InterviewMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ic *InterviewCreate) SetCreatedAt(t time.Time) *InterviewCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableCreatedAt(t *time.Time) *InterviewCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InterviewCreate) SetUpdatedAt(t time.Time) *InterviewCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableUpdatedAt(t *time.Time) *InterviewCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetUserID sets the "user_id" field.
func (ic *InterviewCreate) SetUserID(u uint64) *InterviewCreate {
	ic.mutation.SetUserID(u)
	return ic
}

// SetPosition sets the "position" field.
func (ic *InterviewCreate) SetPosition(s string) *InterviewCreate {
	ic.mutation.SetPosition(s)
	return ic
}

// SetExperience sets the "experience" field.
func (ic *InterviewCreate) SetExperience(s string) *InterviewCreate {
	ic.mutation.SetExperience(s)
	return ic
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableExperience(s *string) *InterviewCreate {
	if s != nil {
		ic.SetExperience(*s)
	}
	return ic
}

// SetLanguage sets the "language" field.
func (ic *InterviewCreate) SetLanguage(s string) *InterviewCreate {
	ic.mutation.SetLanguage(s)
	return ic
}

// SetVoiceID sets the "voice_id" field.
func (ic *InterviewCreate) SetVoiceID(s string) *InterviewCreate {
	ic.mutation.SetVoiceID(s)
	return ic
}

// SetNillableVoiceID sets the "voice_id" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableVoiceID(s *string) *InterviewCreate {
	if s != nil {
		ic.SetVoiceID(*s)
	}
	return ic
}

// SetSpeed sets the "speed" field.
func (ic *InterviewCreate) SetSpeed(i int32) *InterviewCreate {
	ic.mutation.SetSpeed(i)
	return ic
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableSpeed(i *int32) *InterviewCreate {
	if i != nil {
		ic.SetSpeed(*i)
	}
	return ic
}

// SetSkills sets the "skills" field.
func (ic *InterviewCreate) SetSkills(s []string) *InterviewCreate {
	ic.mutation.SetSkills(s)
	return ic
}

// SetSkillsScore sets the "skills_score" field.
func (ic *InterviewCreate) SetSkillsScore(s []string) *InterviewCreate {
	ic.mutation.SetSkillsScore(s)
	return ic
}

// SetSkipCode sets the "skip_code" field.
func (ic *InterviewCreate) SetSkipCode(b bool) *InterviewCreate {
	ic.mutation.SetSkipCode(b)
	return ic
}

// SetNillableSkipCode sets the "skip_code" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableSkipCode(b *bool) *InterviewCreate {
	if b != nil {
		ic.SetSkipCode(*b)
	}
	return ic
}

// SetTotalQuestions sets the "total_questions" field.
func (ic *InterviewCreate) SetTotalQuestions(i int32) *InterviewCreate {
	ic.mutation.SetTotalQuestions(i)
	return ic
}

// SetNillableTotalQuestions sets the "total_questions" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableTotalQuestions(i *int32) *InterviewCreate {
	if i != nil {
		ic.SetTotalQuestions(*i)
	}
	return ic
}

// SetRemainingQuestions sets the "remaining_questions" field.
func (ic *InterviewCreate) SetRemainingQuestions(i int32) *InterviewCreate {
	ic.mutation.SetRemainingQuestions(i)
	return ic
}

// SetNillableRemainingQuestions sets the "remaining_questions" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableRemainingQuestions(i *int32) *InterviewCreate {
	if i != nil {
		ic.SetRemainingQuestions(*i)
	}
	return ic
}

// SetTotalScore sets the "total_score" field.
func (ic *InterviewCreate) SetTotalScore(is *irelia.TotalScore) *InterviewCreate {
	ic.mutation.SetTotalScore(is)
	return ic
}

// SetOverallScore sets the "overall_score" field.
func (ic *InterviewCreate) SetOverallScore(f float64) *InterviewCreate {
	ic.mutation.SetOverallScore(f)
	return ic
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableOverallScore(f *float64) *InterviewCreate {
	if f != nil {
		ic.SetOverallScore(*f)
	}
	return ic
}

// SetPositiveFeedback sets the "positive_feedback" field.
func (ic *InterviewCreate) SetPositiveFeedback(s string) *InterviewCreate {
	ic.mutation.SetPositiveFeedback(s)
	return ic
}

// SetNillablePositiveFeedback sets the "positive_feedback" field if the given value is not nil.
func (ic *InterviewCreate) SetNillablePositiveFeedback(s *string) *InterviewCreate {
	if s != nil {
		ic.SetPositiveFeedback(*s)
	}
	return ic
}

// SetActionableFeedback sets the "actionable_feedback" field.
func (ic *InterviewCreate) SetActionableFeedback(s string) *InterviewCreate {
	ic.mutation.SetActionableFeedback(s)
	return ic
}

// SetNillableActionableFeedback sets the "actionable_feedback" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableActionableFeedback(s *string) *InterviewCreate {
	if s != nil {
		ic.SetActionableFeedback(*s)
	}
	return ic
}

// SetFinalComment sets the "final_comment" field.
func (ic *InterviewCreate) SetFinalComment(s string) *InterviewCreate {
	ic.mutation.SetFinalComment(s)
	return ic
}

// SetNillableFinalComment sets the "final_comment" field if the given value is not nil.
func (ic *InterviewCreate) SetNillableFinalComment(s *string) *InterviewCreate {
	if s != nil {
		ic.SetFinalComment(*s)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *InterviewCreate) SetStatus(is irelia.InterviewStatus) *InterviewCreate {
	ic.mutation.SetStatus(is)
	return ic
}

// SetID sets the "id" field.
func (ic *InterviewCreate) SetID(s string) *InterviewCreate {
	ic.mutation.SetID(s)
	return ic
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (ic *InterviewCreate) AddQuestionIDs(ids ...int) *InterviewCreate {
	ic.mutation.AddQuestionIDs(ids...)
	return ic
}

// AddQuestions adds the "questions" edges to the Question entity.
func (ic *InterviewCreate) AddQuestions(q ...*Question) *InterviewCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ic.AddQuestionIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the InterviewFavorite entity by IDs.
func (ic *InterviewCreate) AddFavoriteIDs(ids ...int) *InterviewCreate {
	ic.mutation.AddFavoriteIDs(ids...)
	return ic
}

// AddFavorites adds the "favorites" edges to the InterviewFavorite entity.
func (ic *InterviewCreate) AddFavorites(i ...*InterviewFavorite) *InterviewCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddFavoriteIDs(ids...)
}

// Mutation returns the InterviewMutation object of the builder.
func (ic *InterviewCreate) Mutation() *InterviewMutation {
	return ic.mutation
}

// Save creates the Interview in the database.
func (ic *InterviewCreate) Save(ctx context.Context) (*Interview, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InterviewCreate) SaveX(ctx context.Context) *Interview {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InterviewCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InterviewCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InterviewCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := interview.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := interview.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.Speed(); !ok {
		v := interview.DefaultSpeed
		ic.mutation.SetSpeed(v)
	}
	if _, ok := ic.mutation.SkipCode(); !ok {
		v := interview.DefaultSkipCode
		ic.mutation.SetSkipCode(v)
	}
	if _, ok := ic.mutation.TotalQuestions(); !ok {
		v := interview.DefaultTotalQuestions
		ic.mutation.SetTotalQuestions(v)
	}
	if _, ok := ic.mutation.RemainingQuestions(); !ok {
		v := interview.DefaultRemainingQuestions
		ic.mutation.SetRemainingQuestions(v)
	}
	if _, ok := ic.mutation.OverallScore(); !ok {
		v := interview.DefaultOverallScore
		ic.mutation.SetOverallScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InterviewCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Interview.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Interview.updated_at"`)}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Interview.user_id"`)}
	}
	if _, ok := ic.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Interview.position"`)}
	}
	if v, ok := ic.mutation.Position(); ok {
		if err := interview.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Interview.position": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Interview.language"`)}
	}
	if v, ok := ic.mutation.Language(); ok {
		if err := interview.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Interview.language": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`ent: missing required field "Interview.speed"`)}
	}
	if _, ok := ic.mutation.SkipCode(); !ok {
		return &ValidationError{Name: "skip_code", err: errors.New(`ent: missing required field "Interview.skip_code"`)}
	}
	if _, ok := ic.mutation.TotalQuestions(); !ok {
		return &ValidationError{Name: "total_questions", err: errors.New(`ent: missing required field "Interview.total_questions"`)}
	}
	if _, ok := ic.mutation.RemainingQuestions(); !ok {
		return &ValidationError{Name: "remaining_questions", err: errors.New(`ent: missing required field "Interview.remaining_questions"`)}
	}
	if _, ok := ic.mutation.OverallScore(); !ok {
		return &ValidationError{Name: "overall_score", err: errors.New(`ent: missing required field "Interview.overall_score"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Interview.status"`)}
	}
	return nil
}

func (ic *InterviewCreate) sqlSave(ctx context.Context) (*Interview, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Interview.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InterviewCreate) createSpec() (*Interview, *sqlgraph.CreateSpec) {
	var (
		_node = &Interview{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(interview.Table, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(interview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.UserID(); ok {
		_spec.SetField(interview.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := ic.mutation.Position(); ok {
		_spec.SetField(interview.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := ic.mutation.Experience(); ok {
		_spec.SetField(interview.FieldExperience, field.TypeString, value)
		_node.Experience = value
	}
	if value, ok := ic.mutation.Language(); ok {
		_spec.SetField(interview.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := ic.mutation.VoiceID(); ok {
		_spec.SetField(interview.FieldVoiceID, field.TypeString, value)
		_node.VoiceID = value
	}
	if value, ok := ic.mutation.Speed(); ok {
		_spec.SetField(interview.FieldSpeed, field.TypeInt32, value)
		_node.Speed = value
	}
	if value, ok := ic.mutation.Skills(); ok {
		_spec.SetField(interview.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := ic.mutation.SkillsScore(); ok {
		_spec.SetField(interview.FieldSkillsScore, field.TypeJSON, value)
		_node.SkillsScore = value
	}
	if value, ok := ic.mutation.SkipCode(); ok {
		_spec.SetField(interview.FieldSkipCode, field.TypeBool, value)
		_node.SkipCode = value
	}
	if value, ok := ic.mutation.TotalQuestions(); ok {
		_spec.SetField(interview.FieldTotalQuestions, field.TypeInt32, value)
		_node.TotalQuestions = value
	}
	if value, ok := ic.mutation.RemainingQuestions(); ok {
		_spec.SetField(interview.FieldRemainingQuestions, field.TypeInt32, value)
		_node.RemainingQuestions = value
	}
	if value, ok := ic.mutation.TotalScore(); ok {
		_spec.SetField(interview.FieldTotalScore, field.TypeJSON, value)
		_node.TotalScore = value
	}
	if value, ok := ic.mutation.OverallScore(); ok {
		_spec.SetField(interview.FieldOverallScore, field.TypeFloat64, value)
		_node.OverallScore = value
	}
	if value, ok := ic.mutation.PositiveFeedback(); ok {
		_spec.SetField(interview.FieldPositiveFeedback, field.TypeString, value)
		_node.PositiveFeedback = value
	}
	if value, ok := ic.mutation.ActionableFeedback(); ok {
		_spec.SetField(interview.FieldActionableFeedback, field.TypeString, value)
		_node.ActionableFeedback = value
	}
	if value, ok := ic.mutation.FinalComment(); ok {
		_spec.SetField(interview.FieldFinalComment, field.TypeString, value)
		_node.FinalComment = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if nodes := ic.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InterviewCreateBulk is the builder for creating many Interview entities in bulk.
type InterviewCreateBulk struct {
	config
	err      error
	builders []*InterviewCreate
}

// Save creates the Interview entities in the database.
func (icb *InterviewCreateBulk) Save(ctx context.Context) ([]*Interview, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Interview, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InterviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InterviewCreateBulk) SaveX(ctx context.Context) []*Interview {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InterviewCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InterviewCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
