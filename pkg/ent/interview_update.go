// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	irelia "irelia/api"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"irelia/pkg/ent/predicate"
	"irelia/pkg/ent/question"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// InterviewUpdate is the builder for updating Interview entities.
type InterviewUpdate struct {
	config
	hooks     []Hook
	mutation  *InterviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iu *InterviewUpdate) Where(ps ...predicate.Interview) *InterviewUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InterviewUpdate) SetUpdatedAt(t time.Time) *InterviewUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetPosition sets the "position" field.
func (iu *InterviewUpdate) SetPosition(s string) *InterviewUpdate {
	iu.mutation.SetPosition(s)
	return iu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillablePosition(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetPosition(*s)
	}
	return iu
}

// SetExperience sets the "experience" field.
func (iu *InterviewUpdate) SetExperience(s string) *InterviewUpdate {
	iu.mutation.SetExperience(s)
	return iu
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableExperience(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetExperience(*s)
	}
	return iu
}

// ClearExperience clears the value of the "experience" field.
func (iu *InterviewUpdate) ClearExperience() *InterviewUpdate {
	iu.mutation.ClearExperience()
	return iu
}

// SetLanguage sets the "language" field.
func (iu *InterviewUpdate) SetLanguage(s string) *InterviewUpdate {
	iu.mutation.SetLanguage(s)
	return iu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableLanguage(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetLanguage(*s)
	}
	return iu
}

// SetVoiceID sets the "voice_id" field.
func (iu *InterviewUpdate) SetVoiceID(s string) *InterviewUpdate {
	iu.mutation.SetVoiceID(s)
	return iu
}

// SetNillableVoiceID sets the "voice_id" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableVoiceID(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetVoiceID(*s)
	}
	return iu
}

// ClearVoiceID clears the value of the "voice_id" field.
func (iu *InterviewUpdate) ClearVoiceID() *InterviewUpdate {
	iu.mutation.ClearVoiceID()
	return iu
}

// SetSpeed sets the "speed" field.
func (iu *InterviewUpdate) SetSpeed(i int32) *InterviewUpdate {
	iu.mutation.ResetSpeed()
	iu.mutation.SetSpeed(i)
	return iu
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableSpeed(i *int32) *InterviewUpdate {
	if i != nil {
		iu.SetSpeed(*i)
	}
	return iu
}

// AddSpeed adds i to the "speed" field.
func (iu *InterviewUpdate) AddSpeed(i int32) *InterviewUpdate {
	iu.mutation.AddSpeed(i)
	return iu
}

// SetSkills sets the "skills" field.
func (iu *InterviewUpdate) SetSkills(s []string) *InterviewUpdate {
	iu.mutation.SetSkills(s)
	return iu
}

// AppendSkills appends s to the "skills" field.
func (iu *InterviewUpdate) AppendSkills(s []string) *InterviewUpdate {
	iu.mutation.AppendSkills(s)
	return iu
}

// ClearSkills clears the value of the "skills" field.
func (iu *InterviewUpdate) ClearSkills() *InterviewUpdate {
	iu.mutation.ClearSkills()
	return iu
}

// SetSkillsScore sets the "skills_score" field.
func (iu *InterviewUpdate) SetSkillsScore(s []string) *InterviewUpdate {
	iu.mutation.SetSkillsScore(s)
	return iu
}

// AppendSkillsScore appends s to the "skills_score" field.
func (iu *InterviewUpdate) AppendSkillsScore(s []string) *InterviewUpdate {
	iu.mutation.AppendSkillsScore(s)
	return iu
}

// ClearSkillsScore clears the value of the "skills_score" field.
func (iu *InterviewUpdate) ClearSkillsScore() *InterviewUpdate {
	iu.mutation.ClearSkillsScore()
	return iu
}

// SetSkipCode sets the "skip_code" field.
func (iu *InterviewUpdate) SetSkipCode(b bool) *InterviewUpdate {
	iu.mutation.SetSkipCode(b)
	return iu
}

// SetNillableSkipCode sets the "skip_code" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableSkipCode(b *bool) *InterviewUpdate {
	if b != nil {
		iu.SetSkipCode(*b)
	}
	return iu
}

// SetTotalQuestions sets the "total_questions" field.
func (iu *InterviewUpdate) SetTotalQuestions(i int32) *InterviewUpdate {
	iu.mutation.ResetTotalQuestions()
	iu.mutation.SetTotalQuestions(i)
	return iu
}

// SetNillableTotalQuestions sets the "total_questions" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableTotalQuestions(i *int32) *InterviewUpdate {
	if i != nil {
		iu.SetTotalQuestions(*i)
	}
	return iu
}

// AddTotalQuestions adds i to the "total_questions" field.
func (iu *InterviewUpdate) AddTotalQuestions(i int32) *InterviewUpdate {
	iu.mutation.AddTotalQuestions(i)
	return iu
}

// SetRemainingQuestions sets the "remaining_questions" field.
func (iu *InterviewUpdate) SetRemainingQuestions(i int32) *InterviewUpdate {
	iu.mutation.ResetRemainingQuestions()
	iu.mutation.SetRemainingQuestions(i)
	return iu
}

// SetNillableRemainingQuestions sets the "remaining_questions" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableRemainingQuestions(i *int32) *InterviewUpdate {
	if i != nil {
		iu.SetRemainingQuestions(*i)
	}
	return iu
}

// AddRemainingQuestions adds i to the "remaining_questions" field.
func (iu *InterviewUpdate) AddRemainingQuestions(i int32) *InterviewUpdate {
	iu.mutation.AddRemainingQuestions(i)
	return iu
}

// SetTotalScore sets the "total_score" field.
func (iu *InterviewUpdate) SetTotalScore(is *irelia.TotalScore) *InterviewUpdate {
	iu.mutation.SetTotalScore(is)
	return iu
}

// ClearTotalScore clears the value of the "total_score" field.
func (iu *InterviewUpdate) ClearTotalScore() *InterviewUpdate {
	iu.mutation.ClearTotalScore()
	return iu
}

// SetPositiveFeedback sets the "positive_feedback" field.
func (iu *InterviewUpdate) SetPositiveFeedback(s string) *InterviewUpdate {
	iu.mutation.SetPositiveFeedback(s)
	return iu
}

// SetNillablePositiveFeedback sets the "positive_feedback" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillablePositiveFeedback(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetPositiveFeedback(*s)
	}
	return iu
}

// ClearPositiveFeedback clears the value of the "positive_feedback" field.
func (iu *InterviewUpdate) ClearPositiveFeedback() *InterviewUpdate {
	iu.mutation.ClearPositiveFeedback()
	return iu
}

// SetActionableFeedback sets the "actionable_feedback" field.
func (iu *InterviewUpdate) SetActionableFeedback(s string) *InterviewUpdate {
	iu.mutation.SetActionableFeedback(s)
	return iu
}

// SetNillableActionableFeedback sets the "actionable_feedback" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableActionableFeedback(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetActionableFeedback(*s)
	}
	return iu
}

// ClearActionableFeedback clears the value of the "actionable_feedback" field.
func (iu *InterviewUpdate) ClearActionableFeedback() *InterviewUpdate {
	iu.mutation.ClearActionableFeedback()
	return iu
}

// SetFinalComment sets the "final_comment" field.
func (iu *InterviewUpdate) SetFinalComment(s string) *InterviewUpdate {
	iu.mutation.SetFinalComment(s)
	return iu
}

// SetNillableFinalComment sets the "final_comment" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableFinalComment(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetFinalComment(*s)
	}
	return iu
}

// ClearFinalComment clears the value of the "final_comment" field.
func (iu *InterviewUpdate) ClearFinalComment() *InterviewUpdate {
	iu.mutation.ClearFinalComment()
	return iu
}

// SetStatus sets the "status" field.
func (iu *InterviewUpdate) SetStatus(is irelia.InterviewStatus) *InterviewUpdate {
	iu.mutation.ResetStatus()
	iu.mutation.SetStatus(is)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableStatus(is *irelia.InterviewStatus) *InterviewUpdate {
	if is != nil {
		iu.SetStatus(*is)
	}
	return iu
}

// AddStatus adds is to the "status" field.
func (iu *InterviewUpdate) AddStatus(is irelia.InterviewStatus) *InterviewUpdate {
	iu.mutation.AddStatus(is)
	return iu
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (iu *InterviewUpdate) AddQuestionIDs(ids ...int) *InterviewUpdate {
	iu.mutation.AddQuestionIDs(ids...)
	return iu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (iu *InterviewUpdate) AddQuestions(q ...*Question) *InterviewUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iu.AddQuestionIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the InterviewFavorite entity by IDs.
func (iu *InterviewUpdate) AddFavoriteIDs(ids ...int) *InterviewUpdate {
	iu.mutation.AddFavoriteIDs(ids...)
	return iu
}

// AddFavorites adds the "favorites" edges to the InterviewFavorite entity.
func (iu *InterviewUpdate) AddFavorites(i ...*InterviewFavorite) *InterviewUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddFavoriteIDs(ids...)
}

// Mutation returns the InterviewMutation object of the builder.
func (iu *InterviewUpdate) Mutation() *InterviewMutation {
	return iu.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (iu *InterviewUpdate) ClearQuestions() *InterviewUpdate {
	iu.mutation.ClearQuestions()
	return iu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (iu *InterviewUpdate) RemoveQuestionIDs(ids ...int) *InterviewUpdate {
	iu.mutation.RemoveQuestionIDs(ids...)
	return iu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (iu *InterviewUpdate) RemoveQuestions(q ...*Question) *InterviewUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iu.RemoveQuestionIDs(ids...)
}

// ClearFavorites clears all "favorites" edges to the InterviewFavorite entity.
func (iu *InterviewUpdate) ClearFavorites() *InterviewUpdate {
	iu.mutation.ClearFavorites()
	return iu
}

// RemoveFavoriteIDs removes the "favorites" edge to InterviewFavorite entities by IDs.
func (iu *InterviewUpdate) RemoveFavoriteIDs(ids ...int) *InterviewUpdate {
	iu.mutation.RemoveFavoriteIDs(ids...)
	return iu
}

// RemoveFavorites removes "favorites" edges to InterviewFavorite entities.
func (iu *InterviewUpdate) RemoveFavorites(i ...*InterviewFavorite) *InterviewUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveFavoriteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InterviewUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InterviewUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InterviewUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InterviewUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InterviewUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := interview.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InterviewUpdate) check() error {
	if v, ok := iu.mutation.Position(); ok {
		if err := interview.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Interview.position": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Language(); ok {
		if err := interview.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Interview.language": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InterviewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InterviewUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InterviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Position(); ok {
		_spec.SetField(interview.FieldPosition, field.TypeString, value)
	}
	if value, ok := iu.mutation.Experience(); ok {
		_spec.SetField(interview.FieldExperience, field.TypeString, value)
	}
	if iu.mutation.ExperienceCleared() {
		_spec.ClearField(interview.FieldExperience, field.TypeString)
	}
	if value, ok := iu.mutation.Language(); ok {
		_spec.SetField(interview.FieldLanguage, field.TypeString, value)
	}
	if value, ok := iu.mutation.VoiceID(); ok {
		_spec.SetField(interview.FieldVoiceID, field.TypeString, value)
	}
	if iu.mutation.VoiceIDCleared() {
		_spec.ClearField(interview.FieldVoiceID, field.TypeString)
	}
	if value, ok := iu.mutation.Speed(); ok {
		_spec.SetField(interview.FieldSpeed, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedSpeed(); ok {
		_spec.AddField(interview.FieldSpeed, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Skills(); ok {
		_spec.SetField(interview.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, interview.FieldSkills, value)
		})
	}
	if iu.mutation.SkillsCleared() {
		_spec.ClearField(interview.FieldSkills, field.TypeJSON)
	}
	if value, ok := iu.mutation.SkillsScore(); ok {
		_spec.SetField(interview.FieldSkillsScore, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedSkillsScore(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, interview.FieldSkillsScore, value)
		})
	}
	if iu.mutation.SkillsScoreCleared() {
		_spec.ClearField(interview.FieldSkillsScore, field.TypeJSON)
	}
	if value, ok := iu.mutation.SkipCode(); ok {
		_spec.SetField(interview.FieldSkipCode, field.TypeBool, value)
	}
	if value, ok := iu.mutation.TotalQuestions(); ok {
		_spec.SetField(interview.FieldTotalQuestions, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedTotalQuestions(); ok {
		_spec.AddField(interview.FieldTotalQuestions, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.RemainingQuestions(); ok {
		_spec.SetField(interview.FieldRemainingQuestions, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedRemainingQuestions(); ok {
		_spec.AddField(interview.FieldRemainingQuestions, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.TotalScore(); ok {
		_spec.SetField(interview.FieldTotalScore, field.TypeJSON, value)
	}
	if iu.mutation.TotalScoreCleared() {
		_spec.ClearField(interview.FieldTotalScore, field.TypeJSON)
	}
	if value, ok := iu.mutation.PositiveFeedback(); ok {
		_spec.SetField(interview.FieldPositiveFeedback, field.TypeString, value)
	}
	if iu.mutation.PositiveFeedbackCleared() {
		_spec.ClearField(interview.FieldPositiveFeedback, field.TypeString)
	}
	if value, ok := iu.mutation.ActionableFeedback(); ok {
		_spec.SetField(interview.FieldActionableFeedback, field.TypeString, value)
	}
	if iu.mutation.ActionableFeedbackCleared() {
		_spec.ClearField(interview.FieldActionableFeedback, field.TypeString)
	}
	if value, ok := iu.mutation.FinalComment(); ok {
		_spec.SetField(interview.FieldFinalComment, field.TypeString, value)
	}
	if iu.mutation.FinalCommentCleared() {
		_spec.ClearField(interview.FieldFinalComment, field.TypeString)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedStatus(); ok {
		_spec.AddField(interview.FieldStatus, field.TypeInt32, value)
	}
	if iu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !iu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !iu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InterviewUpdateOne is the builder for updating a single Interview entity.
type InterviewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InterviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InterviewUpdateOne) SetUpdatedAt(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetPosition sets the "position" field.
func (iuo *InterviewUpdateOne) SetPosition(s string) *InterviewUpdateOne {
	iuo.mutation.SetPosition(s)
	return iuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillablePosition(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetPosition(*s)
	}
	return iuo
}

// SetExperience sets the "experience" field.
func (iuo *InterviewUpdateOne) SetExperience(s string) *InterviewUpdateOne {
	iuo.mutation.SetExperience(s)
	return iuo
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableExperience(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetExperience(*s)
	}
	return iuo
}

// ClearExperience clears the value of the "experience" field.
func (iuo *InterviewUpdateOne) ClearExperience() *InterviewUpdateOne {
	iuo.mutation.ClearExperience()
	return iuo
}

// SetLanguage sets the "language" field.
func (iuo *InterviewUpdateOne) SetLanguage(s string) *InterviewUpdateOne {
	iuo.mutation.SetLanguage(s)
	return iuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableLanguage(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetLanguage(*s)
	}
	return iuo
}

// SetVoiceID sets the "voice_id" field.
func (iuo *InterviewUpdateOne) SetVoiceID(s string) *InterviewUpdateOne {
	iuo.mutation.SetVoiceID(s)
	return iuo
}

// SetNillableVoiceID sets the "voice_id" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableVoiceID(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetVoiceID(*s)
	}
	return iuo
}

// ClearVoiceID clears the value of the "voice_id" field.
func (iuo *InterviewUpdateOne) ClearVoiceID() *InterviewUpdateOne {
	iuo.mutation.ClearVoiceID()
	return iuo
}

// SetSpeed sets the "speed" field.
func (iuo *InterviewUpdateOne) SetSpeed(i int32) *InterviewUpdateOne {
	iuo.mutation.ResetSpeed()
	iuo.mutation.SetSpeed(i)
	return iuo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableSpeed(i *int32) *InterviewUpdateOne {
	if i != nil {
		iuo.SetSpeed(*i)
	}
	return iuo
}

// AddSpeed adds i to the "speed" field.
func (iuo *InterviewUpdateOne) AddSpeed(i int32) *InterviewUpdateOne {
	iuo.mutation.AddSpeed(i)
	return iuo
}

// SetSkills sets the "skills" field.
func (iuo *InterviewUpdateOne) SetSkills(s []string) *InterviewUpdateOne {
	iuo.mutation.SetSkills(s)
	return iuo
}

// AppendSkills appends s to the "skills" field.
func (iuo *InterviewUpdateOne) AppendSkills(s []string) *InterviewUpdateOne {
	iuo.mutation.AppendSkills(s)
	return iuo
}

// ClearSkills clears the value of the "skills" field.
func (iuo *InterviewUpdateOne) ClearSkills() *InterviewUpdateOne {
	iuo.mutation.ClearSkills()
	return iuo
}

// SetSkillsScore sets the "skills_score" field.
func (iuo *InterviewUpdateOne) SetSkillsScore(s []string) *InterviewUpdateOne {
	iuo.mutation.SetSkillsScore(s)
	return iuo
}

// AppendSkillsScore appends s to the "skills_score" field.
func (iuo *InterviewUpdateOne) AppendSkillsScore(s []string) *InterviewUpdateOne {
	iuo.mutation.AppendSkillsScore(s)
	return iuo
}

// ClearSkillsScore clears the value of the "skills_score" field.
func (iuo *InterviewUpdateOne) ClearSkillsScore() *InterviewUpdateOne {
	iuo.mutation.ClearSkillsScore()
	return iuo
}

// SetSkipCode sets the "skip_code" field.
func (iuo *InterviewUpdateOne) SetSkipCode(b bool) *InterviewUpdateOne {
	iuo.mutation.SetSkipCode(b)
	return iuo
}

// SetNillableSkipCode sets the "skip_code" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableSkipCode(b *bool) *InterviewUpdateOne {
	if b != nil {
		iuo.SetSkipCode(*b)
	}
	return iuo
}

// SetTotalQuestions sets the "total_questions" field.
func (iuo *InterviewUpdateOne) SetTotalQuestions(i int32) *InterviewUpdateOne {
	iuo.mutation.ResetTotalQuestions()
	iuo.mutation.SetTotalQuestions(i)
	return iuo
}

// SetNillableTotalQuestions sets the "total_questions" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableTotalQuestions(i *int32) *InterviewUpdateOne {
	if i != nil {
		iuo.SetTotalQuestions(*i)
	}
	return iuo
}

// AddTotalQuestions adds i to the "total_questions" field.
func (iuo *InterviewUpdateOne) AddTotalQuestions(i int32) *InterviewUpdateOne {
	iuo.mutation.AddTotalQuestions(i)
	return iuo
}

// SetRemainingQuestions sets the "remaining_questions" field.
func (iuo *InterviewUpdateOne) SetRemainingQuestions(i int32) *InterviewUpdateOne {
	iuo.mutation.ResetRemainingQuestions()
	iuo.mutation.SetRemainingQuestions(i)
	return iuo
}

// SetNillableRemainingQuestions sets the "remaining_questions" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableRemainingQuestions(i *int32) *InterviewUpdateOne {
	if i != nil {
		iuo.SetRemainingQuestions(*i)
	}
	return iuo
}

// AddRemainingQuestions adds i to the "remaining_questions" field.
func (iuo *InterviewUpdateOne) AddRemainingQuestions(i int32) *InterviewUpdateOne {
	iuo.mutation.AddRemainingQuestions(i)
	return iuo
}

// SetTotalScore sets the "total_score" field.
func (iuo *InterviewUpdateOne) SetTotalScore(is *irelia.TotalScore) *InterviewUpdateOne {
	iuo.mutation.SetTotalScore(is)
	return iuo
}

// ClearTotalScore clears the value of the "total_score" field.
func (iuo *InterviewUpdateOne) ClearTotalScore() *InterviewUpdateOne {
	iuo.mutation.ClearTotalScore()
	return iuo
}

// SetPositiveFeedback sets the "positive_feedback" field.
func (iuo *InterviewUpdateOne) SetPositiveFeedback(s string) *InterviewUpdateOne {
	iuo.mutation.SetPositiveFeedback(s)
	return iuo
}

// SetNillablePositiveFeedback sets the "positive_feedback" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillablePositiveFeedback(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetPositiveFeedback(*s)
	}
	return iuo
}

// ClearPositiveFeedback clears the value of the "positive_feedback" field.
func (iuo *InterviewUpdateOne) ClearPositiveFeedback() *InterviewUpdateOne {
	iuo.mutation.ClearPositiveFeedback()
	return iuo
}

// SetActionableFeedback sets the "actionable_feedback" field.
func (iuo *InterviewUpdateOne) SetActionableFeedback(s string) *InterviewUpdateOne {
	iuo.mutation.SetActionableFeedback(s)
	return iuo
}

// SetNillableActionableFeedback sets the "actionable_feedback" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableActionableFeedback(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetActionableFeedback(*s)
	}
	return iuo
}

// ClearActionableFeedback clears the value of the "actionable_feedback" field.
func (iuo *InterviewUpdateOne) ClearActionableFeedback() *InterviewUpdateOne {
	iuo.mutation.ClearActionableFeedback()
	return iuo
}

// SetFinalComment sets the "final_comment" field.
func (iuo *InterviewUpdateOne) SetFinalComment(s string) *InterviewUpdateOne {
	iuo.mutation.SetFinalComment(s)
	return iuo
}

// SetNillableFinalComment sets the "final_comment" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableFinalComment(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetFinalComment(*s)
	}
	return iuo
}

// ClearFinalComment clears the value of the "final_comment" field.
func (iuo *InterviewUpdateOne) ClearFinalComment() *InterviewUpdateOne {
	iuo.mutation.ClearFinalComment()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InterviewUpdateOne) SetStatus(is irelia.InterviewStatus) *InterviewUpdateOne {
	iuo.mutation.ResetStatus()
	iuo.mutation.SetStatus(is)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableStatus(is *irelia.InterviewStatus) *InterviewUpdateOne {
	if is != nil {
		iuo.SetStatus(*is)
	}
	return iuo
}

// AddStatus adds is to the "status" field.
func (iuo *InterviewUpdateOne) AddStatus(is irelia.InterviewStatus) *InterviewUpdateOne {
	iuo.mutation.AddStatus(is)
	return iuo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (iuo *InterviewUpdateOne) AddQuestionIDs(ids ...int) *InterviewUpdateOne {
	iuo.mutation.AddQuestionIDs(ids...)
	return iuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (iuo *InterviewUpdateOne) AddQuestions(q ...*Question) *InterviewUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iuo.AddQuestionIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the InterviewFavorite entity by IDs.
func (iuo *InterviewUpdateOne) AddFavoriteIDs(ids ...int) *InterviewUpdateOne {
	iuo.mutation.AddFavoriteIDs(ids...)
	return iuo
}

// AddFavorites adds the "favorites" edges to the InterviewFavorite entity.
func (iuo *InterviewUpdateOne) AddFavorites(i ...*InterviewFavorite) *InterviewUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddFavoriteIDs(ids...)
}

// Mutation returns the InterviewMutation object of the builder.
func (iuo *InterviewUpdateOne) Mutation() *InterviewMutation {
	return iuo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (iuo *InterviewUpdateOne) ClearQuestions() *InterviewUpdateOne {
	iuo.mutation.ClearQuestions()
	return iuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (iuo *InterviewUpdateOne) RemoveQuestionIDs(ids ...int) *InterviewUpdateOne {
	iuo.mutation.RemoveQuestionIDs(ids...)
	return iuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (iuo *InterviewUpdateOne) RemoveQuestions(q ...*Question) *InterviewUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iuo.RemoveQuestionIDs(ids...)
}

// ClearFavorites clears all "favorites" edges to the InterviewFavorite entity.
func (iuo *InterviewUpdateOne) ClearFavorites() *InterviewUpdateOne {
	iuo.mutation.ClearFavorites()
	return iuo
}

// RemoveFavoriteIDs removes the "favorites" edge to InterviewFavorite entities by IDs.
func (iuo *InterviewUpdateOne) RemoveFavoriteIDs(ids ...int) *InterviewUpdateOne {
	iuo.mutation.RemoveFavoriteIDs(ids...)
	return iuo
}

// RemoveFavorites removes "favorites" edges to InterviewFavorite entities.
func (iuo *InterviewUpdateOne) RemoveFavorites(i ...*InterviewFavorite) *InterviewUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveFavoriteIDs(ids...)
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iuo *InterviewUpdateOne) Where(ps ...predicate.Interview) *InterviewUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InterviewUpdateOne) Select(field string, fields ...string) *InterviewUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Interview entity.
func (iuo *InterviewUpdateOne) Save(ctx context.Context) (*Interview, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InterviewUpdateOne) SaveX(ctx context.Context) *Interview {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InterviewUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InterviewUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InterviewUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := interview.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InterviewUpdateOne) check() error {
	if v, ok := iuo.mutation.Position(); ok {
		if err := interview.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Interview.position": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Language(); ok {
		if err := interview.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Interview.language": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InterviewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InterviewUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InterviewUpdateOne) sqlSave(ctx context.Context) (_node *Interview, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Interview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interview.FieldID)
		for _, f := range fields {
			if !interview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Position(); ok {
		_spec.SetField(interview.FieldPosition, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Experience(); ok {
		_spec.SetField(interview.FieldExperience, field.TypeString, value)
	}
	if iuo.mutation.ExperienceCleared() {
		_spec.ClearField(interview.FieldExperience, field.TypeString)
	}
	if value, ok := iuo.mutation.Language(); ok {
		_spec.SetField(interview.FieldLanguage, field.TypeString, value)
	}
	if value, ok := iuo.mutation.VoiceID(); ok {
		_spec.SetField(interview.FieldVoiceID, field.TypeString, value)
	}
	if iuo.mutation.VoiceIDCleared() {
		_spec.ClearField(interview.FieldVoiceID, field.TypeString)
	}
	if value, ok := iuo.mutation.Speed(); ok {
		_spec.SetField(interview.FieldSpeed, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedSpeed(); ok {
		_spec.AddField(interview.FieldSpeed, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Skills(); ok {
		_spec.SetField(interview.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, interview.FieldSkills, value)
		})
	}
	if iuo.mutation.SkillsCleared() {
		_spec.ClearField(interview.FieldSkills, field.TypeJSON)
	}
	if value, ok := iuo.mutation.SkillsScore(); ok {
		_spec.SetField(interview.FieldSkillsScore, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedSkillsScore(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, interview.FieldSkillsScore, value)
		})
	}
	if iuo.mutation.SkillsScoreCleared() {
		_spec.ClearField(interview.FieldSkillsScore, field.TypeJSON)
	}
	if value, ok := iuo.mutation.SkipCode(); ok {
		_spec.SetField(interview.FieldSkipCode, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.TotalQuestions(); ok {
		_spec.SetField(interview.FieldTotalQuestions, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedTotalQuestions(); ok {
		_spec.AddField(interview.FieldTotalQuestions, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.RemainingQuestions(); ok {
		_spec.SetField(interview.FieldRemainingQuestions, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedRemainingQuestions(); ok {
		_spec.AddField(interview.FieldRemainingQuestions, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.TotalScore(); ok {
		_spec.SetField(interview.FieldTotalScore, field.TypeJSON, value)
	}
	if iuo.mutation.TotalScoreCleared() {
		_spec.ClearField(interview.FieldTotalScore, field.TypeJSON)
	}
	if value, ok := iuo.mutation.PositiveFeedback(); ok {
		_spec.SetField(interview.FieldPositiveFeedback, field.TypeString, value)
	}
	if iuo.mutation.PositiveFeedbackCleared() {
		_spec.ClearField(interview.FieldPositiveFeedback, field.TypeString)
	}
	if value, ok := iuo.mutation.ActionableFeedback(); ok {
		_spec.SetField(interview.FieldActionableFeedback, field.TypeString, value)
	}
	if iuo.mutation.ActionableFeedbackCleared() {
		_spec.ClearField(interview.FieldActionableFeedback, field.TypeString)
	}
	if value, ok := iuo.mutation.FinalComment(); ok {
		_spec.SetField(interview.FieldFinalComment, field.TypeString, value)
	}
	if iuo.mutation.FinalCommentCleared() {
		_spec.ClearField(interview.FieldFinalComment, field.TypeString)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(interview.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedStatus(); ok {
		_spec.AddField(interview.FieldStatus, field.TypeInt32, value)
	}
	if iuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !iuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.QuestionsTable,
			Columns: []string{interview.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !iuo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interview.FavoritesTable,
			Columns: []string{interview.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Interview{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
