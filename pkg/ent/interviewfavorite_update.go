// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"irelia/pkg/ent/interview"
	"irelia/pkg/ent/interviewfavorite"
	"irelia/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InterviewFavoriteUpdate is the builder for updating InterviewFavorite entities.
type InterviewFavoriteUpdate struct {
	config
	hooks    []Hook
	mutation *InterviewFavoriteMutation
}

// Where appends a list predicates to the InterviewFavoriteUpdate builder.
func (ifu *InterviewFavoriteUpdate) Where(ps ...predicate.InterviewFavorite) *InterviewFavoriteUpdate {
	ifu.mutation.Where(ps...)
	return ifu
}

// SetUpdatedAt sets the "updated_at" field.
func (ifu *InterviewFavoriteUpdate) SetUpdatedAt(t time.Time) *InterviewFavoriteUpdate {
	ifu.mutation.SetUpdatedAt(t)
	return ifu
}

// SetUserID sets the "user_id" field.
func (ifu *InterviewFavoriteUpdate) SetUserID(u uint64) *InterviewFavoriteUpdate {
	ifu.mutation.ResetUserID()
	ifu.mutation.SetUserID(u)
	return ifu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ifu *InterviewFavoriteUpdate) SetNillableUserID(u *uint64) *InterviewFavoriteUpdate {
	if u != nil {
		ifu.SetUserID(*u)
	}
	return ifu
}

// AddUserID adds u to the "user_id" field.
func (ifu *InterviewFavoriteUpdate) AddUserID(u int64) *InterviewFavoriteUpdate {
	ifu.mutation.AddUserID(u)
	return ifu
}

// SetInterviewID sets the "interview_id" field.
func (ifu *InterviewFavoriteUpdate) SetInterviewID(s string) *InterviewFavoriteUpdate {
	ifu.mutation.SetInterviewID(s)
	return ifu
}

// SetNillableInterviewID sets the "interview_id" field if the given value is not nil.
func (ifu *InterviewFavoriteUpdate) SetNillableInterviewID(s *string) *InterviewFavoriteUpdate {
	if s != nil {
		ifu.SetInterviewID(*s)
	}
	return ifu
}

// SetInterview sets the "interview" edge to the Interview entity.
func (ifu *InterviewFavoriteUpdate) SetInterview(i *Interview) *InterviewFavoriteUpdate {
	return ifu.SetInterviewID(i.ID)
}

// Mutation returns the InterviewFavoriteMutation object of the builder.
func (ifu *InterviewFavoriteUpdate) Mutation() *InterviewFavoriteMutation {
	return ifu.mutation
}

// ClearInterview clears the "interview" edge to the Interview entity.
func (ifu *InterviewFavoriteUpdate) ClearInterview() *InterviewFavoriteUpdate {
	ifu.mutation.ClearInterview()
	return ifu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifu *InterviewFavoriteUpdate) Save(ctx context.Context) (int, error) {
	ifu.defaults()
	return withHooks(ctx, ifu.sqlSave, ifu.mutation, ifu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifu *InterviewFavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := ifu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifu *InterviewFavoriteUpdate) Exec(ctx context.Context) error {
	_, err := ifu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifu *InterviewFavoriteUpdate) ExecX(ctx context.Context) {
	if err := ifu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifu *InterviewFavoriteUpdate) defaults() {
	if _, ok := ifu.mutation.UpdatedAt(); !ok {
		v := interviewfavorite.UpdateDefaultUpdatedAt()
		ifu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifu *InterviewFavoriteUpdate) check() error {
	if ifu.mutation.InterviewCleared() && len(ifu.mutation.InterviewIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InterviewFavorite.interview"`)
	}
	return nil
}

func (ifu *InterviewFavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ifu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(interviewfavorite.Table, interviewfavorite.Columns, sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt))
	if ps := ifu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifu.mutation.UpdatedAt(); ok {
		_spec.SetField(interviewfavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ifu.mutation.UserID(); ok {
		_spec.SetField(interviewfavorite.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ifu.mutation.AddedUserID(); ok {
		_spec.AddField(interviewfavorite.FieldUserID, field.TypeUint64, value)
	}
	if ifu.mutation.InterviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interviewfavorite.InterviewTable,
			Columns: []string{interviewfavorite.InterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.InterviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interviewfavorite.InterviewTable,
			Columns: []string{interviewfavorite.InterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ifu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interviewfavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifu.mutation.done = true
	return n, nil
}

// InterviewFavoriteUpdateOne is the builder for updating a single InterviewFavorite entity.
type InterviewFavoriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InterviewFavoriteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ifuo *InterviewFavoriteUpdateOne) SetUpdatedAt(t time.Time) *InterviewFavoriteUpdateOne {
	ifuo.mutation.SetUpdatedAt(t)
	return ifuo
}

// SetUserID sets the "user_id" field.
func (ifuo *InterviewFavoriteUpdateOne) SetUserID(u uint64) *InterviewFavoriteUpdateOne {
	ifuo.mutation.ResetUserID()
	ifuo.mutation.SetUserID(u)
	return ifuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ifuo *InterviewFavoriteUpdateOne) SetNillableUserID(u *uint64) *InterviewFavoriteUpdateOne {
	if u != nil {
		ifuo.SetUserID(*u)
	}
	return ifuo
}

// AddUserID adds u to the "user_id" field.
func (ifuo *InterviewFavoriteUpdateOne) AddUserID(u int64) *InterviewFavoriteUpdateOne {
	ifuo.mutation.AddUserID(u)
	return ifuo
}

// SetInterviewID sets the "interview_id" field.
func (ifuo *InterviewFavoriteUpdateOne) SetInterviewID(s string) *InterviewFavoriteUpdateOne {
	ifuo.mutation.SetInterviewID(s)
	return ifuo
}

// SetNillableInterviewID sets the "interview_id" field if the given value is not nil.
func (ifuo *InterviewFavoriteUpdateOne) SetNillableInterviewID(s *string) *InterviewFavoriteUpdateOne {
	if s != nil {
		ifuo.SetInterviewID(*s)
	}
	return ifuo
}

// SetInterview sets the "interview" edge to the Interview entity.
func (ifuo *InterviewFavoriteUpdateOne) SetInterview(i *Interview) *InterviewFavoriteUpdateOne {
	return ifuo.SetInterviewID(i.ID)
}

// Mutation returns the InterviewFavoriteMutation object of the builder.
func (ifuo *InterviewFavoriteUpdateOne) Mutation() *InterviewFavoriteMutation {
	return ifuo.mutation
}

// ClearInterview clears the "interview" edge to the Interview entity.
func (ifuo *InterviewFavoriteUpdateOne) ClearInterview() *InterviewFavoriteUpdateOne {
	ifuo.mutation.ClearInterview()
	return ifuo
}

// Where appends a list predicates to the InterviewFavoriteUpdate builder.
func (ifuo *InterviewFavoriteUpdateOne) Where(ps ...predicate.InterviewFavorite) *InterviewFavoriteUpdateOne {
	ifuo.mutation.Where(ps...)
	return ifuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifuo *InterviewFavoriteUpdateOne) Select(field string, fields ...string) *InterviewFavoriteUpdateOne {
	ifuo.fields = append([]string{field}, fields...)
	return ifuo
}

// Save executes the query and returns the updated InterviewFavorite entity.
func (ifuo *InterviewFavoriteUpdateOne) Save(ctx context.Context) (*InterviewFavorite, error) {
	ifuo.defaults()
	return withHooks(ctx, ifuo.sqlSave, ifuo.mutation, ifuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifuo *InterviewFavoriteUpdateOne) SaveX(ctx context.Context) *InterviewFavorite {
	node, err := ifuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifuo *InterviewFavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := ifuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifuo *InterviewFavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := ifuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifuo *InterviewFavoriteUpdateOne) defaults() {
	if _, ok := ifuo.mutation.UpdatedAt(); !ok {
		v := interviewfavorite.UpdateDefaultUpdatedAt()
		ifuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifuo *InterviewFavoriteUpdateOne) check() error {
	if ifuo.mutation.InterviewCleared() && len(ifuo.mutation.InterviewIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InterviewFavorite.interview"`)
	}
	return nil
}

func (ifuo *InterviewFavoriteUpdateOne) sqlSave(ctx context.Context) (_node *InterviewFavorite, err error) {
	if err := ifuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(interviewfavorite.Table, interviewfavorite.Columns, sqlgraph.NewFieldSpec(interviewfavorite.FieldID, field.TypeInt))
	id, ok := ifuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InterviewFavorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interviewfavorite.FieldID)
		for _, f := range fields {
			if !interviewfavorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interviewfavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifuo.mutation.UpdatedAt(); ok {
		_spec.SetField(interviewfavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ifuo.mutation.UserID(); ok {
		_spec.SetField(interviewfavorite.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ifuo.mutation.AddedUserID(); ok {
		_spec.AddField(interviewfavorite.FieldUserID, field.TypeUint64, value)
	}
	if ifuo.mutation.InterviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interviewfavorite.InterviewTable,
			Columns: []string{interviewfavorite.InterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.InterviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interviewfavorite.InterviewTable,
			Columns: []string{interviewfavorite.InterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interview.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InterviewFavorite{config: ifuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interviewfavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifuo.mutation.done = true
	return _node, nil
}
