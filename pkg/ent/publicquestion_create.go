// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"irelia/pkg/ent/publicquestion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicQuestionCreate is the builder for creating a PublicQuestion entity.
type PublicQuestionCreate struct {
	config
	mutation *PublicQuestionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pqc *PublicQuestionCreate) SetCreatedAt(t time.Time) *PublicQuestionCreate {
	pqc.mutation.SetCreatedAt(t)
	return pqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pqc *PublicQuestionCreate) SetNillableCreatedAt(t *time.Time) *PublicQuestionCreate {
	if t != nil {
		pqc.SetCreatedAt(*t)
	}
	return pqc
}

// SetUpdatedAt sets the "updated_at" field.
func (pqc *PublicQuestionCreate) SetUpdatedAt(t time.Time) *PublicQuestionCreate {
	pqc.mutation.SetUpdatedAt(t)
	return pqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pqc *PublicQuestionCreate) SetNillableUpdatedAt(t *time.Time) *PublicQuestionCreate {
	if t != nil {
		pqc.SetUpdatedAt(*t)
	}
	return pqc
}

// SetPosition sets the "position" field.
func (pqc *PublicQuestionCreate) SetPosition(s string) *PublicQuestionCreate {
	pqc.mutation.SetPosition(s)
	return pqc
}

// SetExperience sets the "experience" field.
func (pqc *PublicQuestionCreate) SetExperience(s string) *PublicQuestionCreate {
	pqc.mutation.SetExperience(s)
	return pqc
}

// SetLanguage sets the "language" field.
func (pqc *PublicQuestionCreate) SetLanguage(s string) *PublicQuestionCreate {
	pqc.mutation.SetLanguage(s)
	return pqc
}

// SetContent sets the "content" field.
func (pqc *PublicQuestionCreate) SetContent(s string) *PublicQuestionCreate {
	pqc.mutation.SetContent(s)
	return pqc
}

// SetAnswer sets the "answer" field.
func (pqc *PublicQuestionCreate) SetAnswer(s string) *PublicQuestionCreate {
	pqc.mutation.SetAnswer(s)
	return pqc
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (pqc *PublicQuestionCreate) SetNillableAnswer(s *string) *PublicQuestionCreate {
	if s != nil {
		pqc.SetAnswer(*s)
	}
	return pqc
}

// Mutation returns the PublicQuestionMutation object of the builder.
func (pqc *PublicQuestionCreate) Mutation() *PublicQuestionMutation {
	return pqc.mutation
}

// Save creates the PublicQuestion in the database.
func (pqc *PublicQuestionCreate) Save(ctx context.Context) (*PublicQuestion, error) {
	pqc.defaults()
	return withHooks(ctx, pqc.sqlSave, pqc.mutation, pqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pqc *PublicQuestionCreate) SaveX(ctx context.Context) *PublicQuestion {
	v, err := pqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqc *PublicQuestionCreate) Exec(ctx context.Context) error {
	_, err := pqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqc *PublicQuestionCreate) ExecX(ctx context.Context) {
	if err := pqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pqc *PublicQuestionCreate) defaults() {
	if _, ok := pqc.mutation.CreatedAt(); !ok {
		v := publicquestion.DefaultCreatedAt()
		pqc.mutation.SetCreatedAt(v)
	}
	if _, ok := pqc.mutation.UpdatedAt(); !ok {
		v := publicquestion.DefaultUpdatedAt()
		pqc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pqc *PublicQuestionCreate) check() error {
	if _, ok := pqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PublicQuestion.created_at"`)}
	}
	if _, ok := pqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PublicQuestion.updated_at"`)}
	}
	if _, ok := pqc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "PublicQuestion.position"`)}
	}
	if v, ok := pqc.mutation.Position(); ok {
		if err := publicquestion.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.position": %w`, err)}
		}
	}
	if _, ok := pqc.mutation.Experience(); !ok {
		return &ValidationError{Name: "experience", err: errors.New(`ent: missing required field "PublicQuestion.experience"`)}
	}
	if v, ok := pqc.mutation.Experience(); ok {
		if err := publicquestion.ExperienceValidator(v); err != nil {
			return &ValidationError{Name: "experience", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.experience": %w`, err)}
		}
	}
	if _, ok := pqc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "PublicQuestion.language"`)}
	}
	if v, ok := pqc.mutation.Language(); ok {
		if err := publicquestion.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.language": %w`, err)}
		}
	}
	if _, ok := pqc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PublicQuestion.content"`)}
	}
	if v, ok := pqc.mutation.Content(); ok {
		if err := publicquestion.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PublicQuestion.content": %w`, err)}
		}
	}
	return nil
}

func (pqc *PublicQuestionCreate) sqlSave(ctx context.Context) (*PublicQuestion, error) {
	if err := pqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pqc.mutation.id = &_node.ID
	pqc.mutation.done = true
	return _node, nil
}

func (pqc *PublicQuestionCreate) createSpec() (*PublicQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicQuestion{config: pqc.config}
		_spec = sqlgraph.NewCreateSpec(publicquestion.Table, sqlgraph.NewFieldSpec(publicquestion.FieldID, field.TypeInt))
	)
	if value, ok := pqc.mutation.CreatedAt(); ok {
		_spec.SetField(publicquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pqc.mutation.UpdatedAt(); ok {
		_spec.SetField(publicquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pqc.mutation.Position(); ok {
		_spec.SetField(publicquestion.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := pqc.mutation.Experience(); ok {
		_spec.SetField(publicquestion.FieldExperience, field.TypeString, value)
		_node.Experience = value
	}
	if value, ok := pqc.mutation.Language(); ok {
		_spec.SetField(publicquestion.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := pqc.mutation.Content(); ok {
		_spec.SetField(publicquestion.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pqc.mutation.Answer(); ok {
		_spec.SetField(publicquestion.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	return _node, _spec
}

// PublicQuestionCreateBulk is the builder for creating many PublicQuestion entities in bulk.
type PublicQuestionCreateBulk struct {
	config
	err      error
	builders []*PublicQuestionCreate
}

// Save creates the PublicQuestion entities in the database.
func (pqcb *PublicQuestionCreateBulk) Save(ctx context.Context) ([]*PublicQuestion, error) {
	if pqcb.err != nil {
		return nil, pqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pqcb.builders))
	nodes := make([]*PublicQuestion, len(pqcb.builders))
	mutators := make([]Mutator, len(pqcb.builders))
	for i := range pqcb.builders {
		func(i int, root context.Context) {
			builder := pqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pqcb *PublicQuestionCreateBulk) SaveX(ctx context.Context) []*PublicQuestion {
	v, err := pqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqcb *PublicQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := pqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqcb *PublicQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := pqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
