// Code generated by ent, DO NOT EDIT.

package question

import (
	irelia "irelia/api"
	"irelia/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// InterviewID applies equality check predicate on the "interview_id" field. It's identical to InterviewIDEQ.
func InterviewID(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldInterviewID, v))
}

// QuestionIndex applies equality check predicate on the "question_index" field. It's identical to QuestionIndexEQ.
func QuestionIndex(v int32) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionIndex, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContent, v))
}

// Audio applies equality check predicate on the "audio" field. It's identical to AudioEQ.
func Audio(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAudio, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAnswer, v))
}

// RecordProof applies equality check predicate on the "record_proof" field. It's identical to RecordProofEQ.
func RecordProof(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldRecordProof, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldComment, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldScore, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldEQ(FieldStatus, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldUpdatedAt, v))
}

// InterviewIDEQ applies the EQ predicate on the "interview_id" field.
func InterviewIDEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldInterviewID, v))
}

// InterviewIDNEQ applies the NEQ predicate on the "interview_id" field.
func InterviewIDNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldInterviewID, v))
}

// InterviewIDIn applies the In predicate on the "interview_id" field.
func InterviewIDIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldInterviewID, vs...))
}

// InterviewIDNotIn applies the NotIn predicate on the "interview_id" field.
func InterviewIDNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldInterviewID, vs...))
}

// InterviewIDGT applies the GT predicate on the "interview_id" field.
func InterviewIDGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldInterviewID, v))
}

// InterviewIDGTE applies the GTE predicate on the "interview_id" field.
func InterviewIDGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldInterviewID, v))
}

// InterviewIDLT applies the LT predicate on the "interview_id" field.
func InterviewIDLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldInterviewID, v))
}

// InterviewIDLTE applies the LTE predicate on the "interview_id" field.
func InterviewIDLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldInterviewID, v))
}

// InterviewIDContains applies the Contains predicate on the "interview_id" field.
func InterviewIDContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldInterviewID, v))
}

// InterviewIDHasPrefix applies the HasPrefix predicate on the "interview_id" field.
func InterviewIDHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldInterviewID, v))
}

// InterviewIDHasSuffix applies the HasSuffix predicate on the "interview_id" field.
func InterviewIDHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldInterviewID, v))
}

// InterviewIDEqualFold applies the EqualFold predicate on the "interview_id" field.
func InterviewIDEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldInterviewID, v))
}

// InterviewIDContainsFold applies the ContainsFold predicate on the "interview_id" field.
func InterviewIDContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldInterviewID, v))
}

// QuestionIndexEQ applies the EQ predicate on the "question_index" field.
func QuestionIndexEQ(v int32) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionIndex, v))
}

// QuestionIndexNEQ applies the NEQ predicate on the "question_index" field.
func QuestionIndexNEQ(v int32) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionIndex, v))
}

// QuestionIndexIn applies the In predicate on the "question_index" field.
func QuestionIndexIn(vs ...int32) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionIndex, vs...))
}

// QuestionIndexNotIn applies the NotIn predicate on the "question_index" field.
func QuestionIndexNotIn(vs ...int32) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionIndex, vs...))
}

// QuestionIndexGT applies the GT predicate on the "question_index" field.
func QuestionIndexGT(v int32) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionIndex, v))
}

// QuestionIndexGTE applies the GTE predicate on the "question_index" field.
func QuestionIndexGTE(v int32) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionIndex, v))
}

// QuestionIndexLT applies the LT predicate on the "question_index" field.
func QuestionIndexLT(v int32) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionIndex, v))
}

// QuestionIndexLTE applies the LTE predicate on the "question_index" field.
func QuestionIndexLTE(v int32) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionIndex, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldContent, v))
}

// AudioEQ applies the EQ predicate on the "audio" field.
func AudioEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAudio, v))
}

// AudioNEQ applies the NEQ predicate on the "audio" field.
func AudioNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldAudio, v))
}

// AudioIn applies the In predicate on the "audio" field.
func AudioIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldAudio, vs...))
}

// AudioNotIn applies the NotIn predicate on the "audio" field.
func AudioNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldAudio, vs...))
}

// AudioGT applies the GT predicate on the "audio" field.
func AudioGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldAudio, v))
}

// AudioGTE applies the GTE predicate on the "audio" field.
func AudioGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldAudio, v))
}

// AudioLT applies the LT predicate on the "audio" field.
func AudioLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldAudio, v))
}

// AudioLTE applies the LTE predicate on the "audio" field.
func AudioLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldAudio, v))
}

// AudioContains applies the Contains predicate on the "audio" field.
func AudioContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldAudio, v))
}

// AudioHasPrefix applies the HasPrefix predicate on the "audio" field.
func AudioHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldAudio, v))
}

// AudioHasSuffix applies the HasSuffix predicate on the "audio" field.
func AudioHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldAudio, v))
}

// AudioIsNil applies the IsNil predicate on the "audio" field.
func AudioIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldAudio))
}

// AudioNotNil applies the NotNil predicate on the "audio" field.
func AudioNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldAudio))
}

// AudioEqualFold applies the EqualFold predicate on the "audio" field.
func AudioEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldAudio, v))
}

// AudioContainsFold applies the ContainsFold predicate on the "audio" field.
func AudioContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldAudio, v))
}

// LipsyncIsNil applies the IsNil predicate on the "lipsync" field.
func LipsyncIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldLipsync))
}

// LipsyncNotNil applies the NotNil predicate on the "lipsync" field.
func LipsyncNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldLipsync))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerIsNil applies the IsNil predicate on the "answer" field.
func AnswerIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldAnswer))
}

// AnswerNotNil applies the NotNil predicate on the "answer" field.
func AnswerNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldAnswer))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldAnswer, v))
}

// RecordProofEQ applies the EQ predicate on the "record_proof" field.
func RecordProofEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldRecordProof, v))
}

// RecordProofNEQ applies the NEQ predicate on the "record_proof" field.
func RecordProofNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldRecordProof, v))
}

// RecordProofIn applies the In predicate on the "record_proof" field.
func RecordProofIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldRecordProof, vs...))
}

// RecordProofNotIn applies the NotIn predicate on the "record_proof" field.
func RecordProofNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldRecordProof, vs...))
}

// RecordProofGT applies the GT predicate on the "record_proof" field.
func RecordProofGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldRecordProof, v))
}

// RecordProofGTE applies the GTE predicate on the "record_proof" field.
func RecordProofGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldRecordProof, v))
}

// RecordProofLT applies the LT predicate on the "record_proof" field.
func RecordProofLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldRecordProof, v))
}

// RecordProofLTE applies the LTE predicate on the "record_proof" field.
func RecordProofLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldRecordProof, v))
}

// RecordProofContains applies the Contains predicate on the "record_proof" field.
func RecordProofContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldRecordProof, v))
}

// RecordProofHasPrefix applies the HasPrefix predicate on the "record_proof" field.
func RecordProofHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldRecordProof, v))
}

// RecordProofHasSuffix applies the HasSuffix predicate on the "record_proof" field.
func RecordProofHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldRecordProof, v))
}

// RecordProofIsNil applies the IsNil predicate on the "record_proof" field.
func RecordProofIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldRecordProof))
}

// RecordProofNotNil applies the NotNil predicate on the "record_proof" field.
func RecordProofNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldRecordProof))
}

// RecordProofEqualFold applies the EqualFold predicate on the "record_proof" field.
func RecordProofEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldRecordProof, v))
}

// RecordProofContainsFold applies the ContainsFold predicate on the "record_proof" field.
func RecordProofContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldRecordProof, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldComment, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldScore, v))
}

// ScoreContains applies the Contains predicate on the "score" field.
func ScoreContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldScore, v))
}

// ScoreHasPrefix applies the HasPrefix predicate on the "score" field.
func ScoreHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldScore, v))
}

// ScoreHasSuffix applies the HasSuffix predicate on the "score" field.
func ScoreHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldScore))
}

// ScoreEqualFold applies the EqualFold predicate on the "score" field.
func ScoreEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldScore, v))
}

// ScoreContainsFold applies the ContainsFold predicate on the "score" field.
func ScoreContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldScore, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...irelia.QuestionStatus) predicate.Question {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Question(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...irelia.QuestionStatus) predicate.Question {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Question(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v irelia.QuestionStatus) predicate.Question {
	vc := int32(v)
	return predicate.Question(sql.FieldLTE(FieldStatus, vc))
}

// HasInterview applies the HasEdge predicate on the "interview" edge.
func HasInterview() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InterviewTable, InterviewColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterviewWith applies the HasEdge predicate on the "interview" edge with a given conditions (other predicates).
func HasInterviewWith(preds ...predicate.Interview) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newInterviewStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
