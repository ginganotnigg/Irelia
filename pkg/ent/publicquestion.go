// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"irelia/pkg/ent/publicquestion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PublicQuestion is the model entity for the PublicQuestion schema.
type PublicQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Experience holds the value of the "experience" field.
	Experience string `json:"experience,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer       string `json:"answer,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicquestion.FieldID:
			values[i] = new(sql.NullInt64)
		case publicquestion.FieldPosition, publicquestion.FieldExperience, publicquestion.FieldLanguage, publicquestion.FieldContent, publicquestion.FieldAnswer:
			values[i] = new(sql.NullString)
		case publicquestion.FieldCreatedAt, publicquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicQuestion fields.
func (pq *PublicQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pq.ID = int(value.Int64)
		case publicquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pq.CreatedAt = value.Time
			}
		case publicquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pq.UpdatedAt = value.Time
			}
		case publicquestion.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pq.Position = value.String
			}
		case publicquestion.FieldExperience:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field experience", values[i])
			} else if value.Valid {
				pq.Experience = value.String
			}
		case publicquestion.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				pq.Language = value.String
			}
		case publicquestion.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pq.Content = value.String
			}
		case publicquestion.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				pq.Answer = value.String
			}
		default:
			pq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicQuestion.
// This includes values selected through modifiers, order, etc.
func (pq *PublicQuestion) Value(name string) (ent.Value, error) {
	return pq.selectValues.Get(name)
}

// Update returns a builder for updating this PublicQuestion.
// Note that you need to call PublicQuestion.Unwrap() before calling this method if this PublicQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pq *PublicQuestion) Update() *PublicQuestionUpdateOne {
	return NewPublicQuestionClient(pq.config).UpdateOne(pq)
}

// Unwrap unwraps the PublicQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pq *PublicQuestion) Unwrap() *PublicQuestion {
	_tx, ok := pq.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicQuestion is not a transactional entity")
	}
	pq.config.driver = _tx.drv
	return pq
}

// String implements the fmt.Stringer.
func (pq *PublicQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("PublicQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(pq.Position)
	builder.WriteString(", ")
	builder.WriteString("experience=")
	builder.WriteString(pq.Experience)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(pq.Language)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pq.Content)
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(pq.Answer)
	builder.WriteByte(')')
	return builder.String()
}

// PublicQuestions is a parsable slice of PublicQuestion.
type PublicQuestions []*PublicQuestion
