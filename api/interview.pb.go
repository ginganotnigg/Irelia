// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/interview.proto

package interview

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Database
type Interview struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Field              string                 `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Position           string                 `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Language           string                 `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	VoiceId            string                 `protobuf:"bytes,5,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Speed              int32                  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	Level              string                 `protobuf:"bytes,7,opt,name=level,proto3" json:"level,omitempty"`
	Coding             bool                   `protobuf:"varint,8,opt,name=coding,proto3" json:"coding,omitempty"`
	MaxQuestions       int32                  `protobuf:"varint,9,opt,name=max_questions,json=maxQuestions,proto3" json:"max_questions,omitempty"`
	RemainingQuestions int32                  `protobuf:"varint,10,opt,name=remaining_questions,json=remainingQuestions,proto3" json:"remaining_questions,omitempty"`
	TotalScore         *TotalScore            `protobuf:"bytes,11,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	AreasOfImprovement string                 `protobuf:"bytes,12,opt,name=areas_of_improvement,json=areasOfImprovement,proto3" json:"areas_of_improvement,omitempty"`
	FinalComment       string                 `protobuf:"bytes,13,opt,name=final_comment,json=finalComment,proto3" json:"final_comment,omitempty"`
	Completed          bool                   `protobuf:"varint,14,opt,name=completed,proto3" json:"completed,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string                 `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Interview) Reset() {
	*x = Interview{}
	mi := &file_api_interview_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interview) ProtoMessage() {}

func (x *Interview) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interview.ProtoReflect.Descriptor instead.
func (*Interview) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{0}
}

func (x *Interview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interview) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Interview) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Interview) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Interview) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *Interview) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Interview) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Interview) GetCoding() bool {
	if x != nil {
		return x.Coding
	}
	return false
}

func (x *Interview) GetMaxQuestions() int32 {
	if x != nil {
		return x.MaxQuestions
	}
	return 0
}

func (x *Interview) GetRemainingQuestions() int32 {
	if x != nil {
		return x.RemainingQuestions
	}
	return 0
}

func (x *Interview) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *Interview) GetAreasOfImprovement() string {
	if x != nil {
		return x.AreasOfImprovement
	}
	return ""
}

func (x *Interview) GetFinalComment() string {
	if x != nil {
		return x.FinalComment
	}
	return ""
}

func (x *Interview) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *Interview) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Interview) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type QuestionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Audio         string                 `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync       *LipSyncData           `protobuf:"bytes,4,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionData) Reset() {
	*x = QuestionData{}
	mi := &file_api_interview_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionData) ProtoMessage() {}

func (x *QuestionData) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionData.ProtoReflect.Descriptor instead.
func (*QuestionData) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{1}
}

func (x *QuestionData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *QuestionData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionData) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *QuestionData) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Audio         string                 `protobuf:"bytes,4,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync       *LipSyncData           `protobuf:"bytes,5,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	Answer        string                 `protobuf:"bytes,6,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,7,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	Comment       string                 `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Status        string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"` // "Full", "Partial", "None"
	CreatedAt     string                 `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_api_interview_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{2}
}

func (x *Question) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *Question) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *Question) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

func (x *Question) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Question) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

func (x *Question) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Question) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Question) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Question) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Frontend to Irelia
type StartInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Position      string                 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Models        string                 `protobuf:"bytes,4,opt,name=models,proto3" json:"models,omitempty"`
	Speed         int32                  `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	Level         string                 `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	MaxQuestions  int32                  `protobuf:"varint,7,opt,name=max_questions,json=maxQuestions,proto3" json:"max_questions,omitempty"`
	SkipIntro     bool                   `protobuf:"varint,8,opt,name=skip_intro,json=skipIntro,proto3" json:"skip_intro,omitempty"`
	Coding        bool                   `protobuf:"varint,9,opt,name=coding,proto3" json:"coding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartInterviewRequest) Reset() {
	*x = StartInterviewRequest{}
	mi := &file_api_interview_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInterviewRequest) ProtoMessage() {}

func (x *StartInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInterviewRequest.ProtoReflect.Descriptor instead.
func (*StartInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{3}
}

func (x *StartInterviewRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *StartInterviewRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StartInterviewRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *StartInterviewRequest) GetModels() string {
	if x != nil {
		return x.Models
	}
	return ""
}

func (x *StartInterviewRequest) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *StartInterviewRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *StartInterviewRequest) GetMaxQuestions() int32 {
	if x != nil {
		return x.MaxQuestions
	}
	return 0
}

func (x *StartInterviewRequest) GetSkipIntro() bool {
	if x != nil {
		return x.SkipIntro
	}
	return false
}

func (x *StartInterviewRequest) GetCoding() bool {
	if x != nil {
		return x.Coding
	}
	return false
}

type StartInterviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	FirstQuestion *QuestionData          `protobuf:"bytes,2,opt,name=first_question,json=firstQuestion,proto3" json:"first_question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartInterviewResponse) Reset() {
	*x = StartInterviewResponse{}
	mi := &file_api_interview_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInterviewResponse) ProtoMessage() {}

func (x *StartInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInterviewResponse.ProtoReflect.Descriptor instead.
func (*StartInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{4}
}

func (x *StartInterviewResponse) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *StartInterviewResponse) GetFirstQuestion() *QuestionData {
	if x != nil {
		return x.FirstQuestion
	}
	return nil
}

type SubmitAnswerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,4,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_api_interview_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitAnswerRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SubmitAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *SubmitAnswerRequest) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      *QuestionData          `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_api_interview_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitAnswerResponse) GetQuestion() *QuestionData {
	if x != nil {
		return x.Question
	}
	return nil
}

type SubmitInterviewRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	InterviewId   string                               `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	History       []*SubmitInterviewRequest_AnswerData `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitInterviewRequest) Reset() {
	*x = SubmitInterviewRequest{}
	mi := &file_api_interview_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitInterviewRequest) ProtoMessage() {}

func (x *SubmitInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitInterviewRequest.ProtoReflect.Descriptor instead.
func (*SubmitInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *SubmitInterviewRequest) GetHistory() []*SubmitInterviewRequest_AnswerData {
	if x != nil {
		return x.History
	}
	return nil
}

type SubmitInterviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitInterviewResponse) Reset() {
	*x = SubmitInterviewResponse{}
	mi := &file_api_interview_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitInterviewResponse) ProtoMessage() {}

func (x *SubmitInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitInterviewResponse.ProtoReflect.Descriptor instead.
func (*SubmitInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitInterviewResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewRequest) Reset() {
	*x = GetInterviewRequest{}
	mi := &file_api_interview_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewRequest) ProtoMessage() {}

func (x *GetInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewRequest.ProtoReflect.Descriptor instead.
func (*GetInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{9}
}

func (x *GetInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

type AnswerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,4,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	Comment       string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // "Full", "Partial", "None"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerResult) Reset() {
	*x = AnswerResult{}
	mi := &file_api_interview_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResult) ProtoMessage() {}

func (x *AnswerResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResult.ProtoReflect.Descriptor instead.
func (*AnswerResult) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{10}
}

func (x *AnswerResult) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AnswerResult) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnswerResult) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerResult) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

func (x *AnswerResult) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AnswerResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetInterviewResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InterviewId        string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions        []*AnswerResult        `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	TotalScore         *TotalScore            `protobuf:"bytes,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	AreasOfImprovement string                 `protobuf:"bytes,4,opt,name=areas_of_improvement,json=areasOfImprovement,proto3" json:"areas_of_improvement,omitempty"`
	FinalComment       string                 `protobuf:"bytes,5,opt,name=final_comment,json=finalComment,proto3" json:"final_comment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetInterviewResponse) Reset() {
	*x = GetInterviewResponse{}
	mi := &file_api_interview_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewResponse) ProtoMessage() {}

func (x *GetInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewResponse.ProtoReflect.Descriptor instead.
func (*GetInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{11}
}

func (x *GetInterviewResponse) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *GetInterviewResponse) GetSubmissions() []*AnswerResult {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *GetInterviewResponse) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *GetInterviewResponse) GetAreasOfImprovement() string {
	if x != nil {
		return x.AreasOfImprovement
	}
	return ""
}

func (x *GetInterviewResponse) GetFinalComment() string {
	if x != nil {
		return x.FinalComment
	}
	return ""
}

type TotalScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Full          int32                  `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
	Partial       int32                  `protobuf:"varint,2,opt,name=partial,proto3" json:"partial,omitempty"`
	None          int32                  `protobuf:"varint,3,opt,name=none,proto3" json:"none,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalScore) Reset() {
	*x = TotalScore{}
	mi := &file_api_interview_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalScore) ProtoMessage() {}

func (x *TotalScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalScore.ProtoReflect.Descriptor instead.
func (*TotalScore) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{12}
}

func (x *TotalScore) GetFull() int32 {
	if x != nil {
		return x.Full
	}
	return 0
}

func (x *TotalScore) GetPartial() int32 {
	if x != nil {
		return x.Partial
	}
	return 0
}

func (x *TotalScore) GetNone() int32 {
	if x != nil {
		return x.None
	}
	return 0
}

type GetInterviewHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewHistoryRequest) Reset() {
	*x = GetInterviewHistoryRequest{}
	mi := &file_api_interview_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewHistoryRequest) ProtoMessage() {}

func (x *GetInterviewHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetInterviewHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{13}
}

func (x *GetInterviewHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetInterviewHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage       int32                  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	TotalPages    int32                  `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Interviews    []*InterviewSummary    `protobuf:"bytes,4,rep,name=interviews,proto3" json:"interviews,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewHistoryResponse) Reset() {
	*x = GetInterviewHistoryResponse{}
	mi := &file_api_interview_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewHistoryResponse) ProtoMessage() {}

func (x *GetInterviewHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetInterviewHistoryResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{14}
}

func (x *GetInterviewHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetInterviews() []*InterviewSummary {
	if x != nil {
		return x.Interviews
	}
	return nil
}

type InterviewSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Field         string                 `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Position      string                 `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	TotalScore    *TotalScore            `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterviewSummary) Reset() {
	*x = InterviewSummary{}
	mi := &file_api_interview_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterviewSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterviewSummary) ProtoMessage() {}

func (x *InterviewSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterviewSummary.ProtoReflect.Descriptor instead.
func (*InterviewSummary) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{15}
}

func (x *InterviewSummary) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *InterviewSummary) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *InterviewSummary) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *InterviewSummary) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *InterviewSummary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// Irelia to Darius (Question Generator)
type QaPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QaPair) Reset() {
	*x = QaPair{}
	mi := &file_api_interview_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QaPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QaPair) ProtoMessage() {}

func (x *QaPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QaPair.ProtoReflect.Descriptor instead.
func (*QaPair) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{16}
}

func (x *QaPair) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QaPair) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type NextQuestionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InterviewId        string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions        []*QaPair              `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Context            *StartInterviewRequest `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	RemainingQuestions int32                  `protobuf:"varint,4,opt,name=remaining_questions,json=remainingQuestions,proto3" json:"remaining_questions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NextQuestionRequest) Reset() {
	*x = NextQuestionRequest{}
	mi := &file_api_interview_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextQuestionRequest) ProtoMessage() {}

func (x *NextQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextQuestionRequest.ProtoReflect.Descriptor instead.
func (*NextQuestionRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{17}
}

func (x *NextQuestionRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *NextQuestionRequest) GetSubmissions() []*QaPair {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *NextQuestionRequest) GetContext() *StartInterviewRequest {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *NextQuestionRequest) GetRemainingQuestions() int32 {
	if x != nil {
		return x.RemainingQuestions
	}
	return 0
}

type NextQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Questions     []string               `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextQuestionResponse) Reset() {
	*x = NextQuestionResponse{}
	mi := &file_api_interview_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextQuestionResponse) ProtoMessage() {}

func (x *NextQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextQuestionResponse.ProtoReflect.Descriptor instead.
func (*NextQuestionResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{18}
}

func (x *NextQuestionResponse) GetQuestions() []string {
	if x != nil {
		return x.Questions
	}
	return nil
}

// Irelia to Karma (Lip Sync)
type LipSyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	VoiceId       string                 `protobuf:"bytes,3,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Speed         int32                  `protobuf:"varint,4,opt,name=speed,proto3" json:"speed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncRequest) Reset() {
	*x = LipSyncRequest{}
	mi := &file_api_interview_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncRequest) ProtoMessage() {}

func (x *LipSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncRequest.ProtoReflect.Descriptor instead.
func (*LipSyncRequest) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{19}
}

func (x *LipSyncRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *LipSyncRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LipSyncRequest) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *LipSyncRequest) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type LipSyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         string                 `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync       *LipSyncData           `protobuf:"bytes,2,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncResponse) Reset() {
	*x = LipSyncResponse{}
	mi := &file_api_interview_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncResponse) ProtoMessage() {}

func (x *LipSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncResponse.ProtoReflect.Descriptor instead.
func (*LipSyncResponse) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{20}
}

func (x *LipSyncResponse) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *LipSyncResponse) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

type LipSyncData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *LipSyncMetadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MouthCues     []*MouthCue            `protobuf:"bytes,2,rep,name=mouth_cues,json=mouthCues,proto3" json:"mouth_cues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncData) Reset() {
	*x = LipSyncData{}
	mi := &file_api_interview_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncData) ProtoMessage() {}

func (x *LipSyncData) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncData.ProtoReflect.Descriptor instead.
func (*LipSyncData) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{21}
}

func (x *LipSyncData) GetMetadata() *LipSyncMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LipSyncData) GetMouthCues() []*MouthCue {
	if x != nil {
		return x.MouthCues
	}
	return nil
}

type LipSyncMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SoundFile     string                 `protobuf:"bytes,1,opt,name=sound_file,json=soundFile,proto3" json:"sound_file,omitempty"`
	Duration      float32                `protobuf:"fixed32,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncMetadata) Reset() {
	*x = LipSyncMetadata{}
	mi := &file_api_interview_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncMetadata) ProtoMessage() {}

func (x *LipSyncMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncMetadata.ProtoReflect.Descriptor instead.
func (*LipSyncMetadata) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{22}
}

func (x *LipSyncMetadata) GetSoundFile() string {
	if x != nil {
		return x.SoundFile
	}
	return ""
}

func (x *LipSyncMetadata) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type MouthCue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float32                `protobuf:"fixed32,1,opt,name=start,proto3" json:"start,omitempty"`
	End           float32                `protobuf:"fixed32,2,opt,name=end,proto3" json:"end,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MouthCue) Reset() {
	*x = MouthCue{}
	mi := &file_api_interview_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MouthCue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouthCue) ProtoMessage() {}

func (x *MouthCue) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouthCue.ProtoReflect.Descriptor instead.
func (*MouthCue) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{23}
}

func (x *MouthCue) GetStart() float32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *MouthCue) GetEnd() float32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *MouthCue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SubmitInterviewRequest_AnswerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,3,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitInterviewRequest_AnswerData) Reset() {
	*x = SubmitInterviewRequest_AnswerData{}
	mi := &file_api_interview_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitInterviewRequest_AnswerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitInterviewRequest_AnswerData) ProtoMessage() {}

func (x *SubmitInterviewRequest_AnswerData) ProtoReflect() protoreflect.Message {
	mi := &file_api_interview_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitInterviewRequest_AnswerData.ProtoReflect.Descriptor instead.
func (*SubmitInterviewRequest_AnswerData) Descriptor() ([]byte, []int) {
	return file_api_interview_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SubmitInterviewRequest_AnswerData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SubmitInterviewRequest_AnswerData) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *SubmitInterviewRequest_AnswerData) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

var File_api_interview_proto protoreflect.FileDescriptor

var file_api_interview_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89,
	0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x72, 0x65, 0x61, 0x73, 0x4f, 0x66, 0x49, 0x6d,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4c,
	0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x69, 0x70, 0x73,
	0x79, 0x6e, 0x63, 0x22, 0xd0, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x70,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x7b,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x13,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x4b, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x5d, 0x0a, 0x0a, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x31, 0x0a, 0x17, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x72, 0x65, 0x61, 0x73, 0x4f, 0x66, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x06, 0x51, 0x61,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x51, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x0e, 0x4c, 0x69, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x0f, 0x4c, 0x69, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x69, 0x70,
	0x73, 0x79, 0x6e, 0x63, 0x22, 0x79, 0x0a, 0x0b, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4d, 0x6f, 0x75, 0x74,
	0x68, 0x43, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x43, 0x75, 0x65, 0x73, 0x22,
	0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x08, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x43, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x94, 0x07, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x7d, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x86, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4c,
	0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x70, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x16,
	0x5a, 0x14, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_interview_proto_rawDescOnce sync.Once
	file_api_interview_proto_rawDescData []byte
)

func file_api_interview_proto_rawDescGZIP() []byte {
	file_api_interview_proto_rawDescOnce.Do(func() {
		file_api_interview_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_interview_proto_rawDesc), len(file_api_interview_proto_rawDesc)))
	})
	return file_api_interview_proto_rawDescData
}

var file_api_interview_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_api_interview_proto_goTypes = []any{
	(*Interview)(nil),                         // 0: interview.Interview
	(*QuestionData)(nil),                      // 1: interview.QuestionData
	(*Question)(nil),                          // 2: interview.Question
	(*StartInterviewRequest)(nil),             // 3: interview.StartInterviewRequest
	(*StartInterviewResponse)(nil),            // 4: interview.StartInterviewResponse
	(*SubmitAnswerRequest)(nil),               // 5: interview.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),              // 6: interview.SubmitAnswerResponse
	(*SubmitInterviewRequest)(nil),            // 7: interview.SubmitInterviewRequest
	(*SubmitInterviewResponse)(nil),           // 8: interview.SubmitInterviewResponse
	(*GetInterviewRequest)(nil),               // 9: interview.GetInterviewRequest
	(*AnswerResult)(nil),                      // 10: interview.AnswerResult
	(*GetInterviewResponse)(nil),              // 11: interview.GetInterviewResponse
	(*TotalScore)(nil),                        // 12: interview.TotalScore
	(*GetInterviewHistoryRequest)(nil),        // 13: interview.GetInterviewHistoryRequest
	(*GetInterviewHistoryResponse)(nil),       // 14: interview.GetInterviewHistoryResponse
	(*InterviewSummary)(nil),                  // 15: interview.InterviewSummary
	(*QaPair)(nil),                            // 16: interview.QaPair
	(*NextQuestionRequest)(nil),               // 17: interview.NextQuestionRequest
	(*NextQuestionResponse)(nil),              // 18: interview.NextQuestionResponse
	(*LipSyncRequest)(nil),                    // 19: interview.LipSyncRequest
	(*LipSyncResponse)(nil),                   // 20: interview.LipSyncResponse
	(*LipSyncData)(nil),                       // 21: interview.LipSyncData
	(*LipSyncMetadata)(nil),                   // 22: interview.LipSyncMetadata
	(*MouthCue)(nil),                          // 23: interview.MouthCue
	(*SubmitInterviewRequest_AnswerData)(nil), // 24: interview.SubmitInterviewRequest.AnswerData
}
var file_api_interview_proto_depIdxs = []int32{
	12, // 0: interview.Interview.total_score:type_name -> interview.TotalScore
	21, // 1: interview.QuestionData.lipsync:type_name -> interview.LipSyncData
	21, // 2: interview.Question.lipsync:type_name -> interview.LipSyncData
	1,  // 3: interview.StartInterviewResponse.first_question:type_name -> interview.QuestionData
	1,  // 4: interview.SubmitAnswerResponse.question:type_name -> interview.QuestionData
	24, // 5: interview.SubmitInterviewRequest.history:type_name -> interview.SubmitInterviewRequest.AnswerData
	10, // 6: interview.GetInterviewResponse.submissions:type_name -> interview.AnswerResult
	12, // 7: interview.GetInterviewResponse.total_score:type_name -> interview.TotalScore
	15, // 8: interview.GetInterviewHistoryResponse.interviews:type_name -> interview.InterviewSummary
	12, // 9: interview.InterviewSummary.total_score:type_name -> interview.TotalScore
	16, // 10: interview.NextQuestionRequest.submissions:type_name -> interview.QaPair
	3,  // 11: interview.NextQuestionRequest.context:type_name -> interview.StartInterviewRequest
	21, // 12: interview.LipSyncResponse.lipsync:type_name -> interview.LipSyncData
	22, // 13: interview.LipSyncData.metadata:type_name -> interview.LipSyncMetadata
	23, // 14: interview.LipSyncData.mouth_cues:type_name -> interview.MouthCue
	3,  // 15: interview.InterviewService.StartInterview:input_type -> interview.StartInterviewRequest
	5,  // 16: interview.InterviewService.SubmitAnswer:input_type -> interview.SubmitAnswerRequest
	7,  // 17: interview.InterviewService.SubmitInterview:input_type -> interview.SubmitInterviewRequest
	9,  // 18: interview.InterviewService.GetInterview:input_type -> interview.GetInterviewRequest
	13, // 19: interview.InterviewService.GetInterviewHistory:input_type -> interview.GetInterviewHistoryRequest
	17, // 20: interview.InterviewService.GetNextQuestion:input_type -> interview.NextQuestionRequest
	19, // 21: interview.InterviewService.GenerateLipSync:input_type -> interview.LipSyncRequest
	4,  // 22: interview.InterviewService.StartInterview:output_type -> interview.StartInterviewResponse
	6,  // 23: interview.InterviewService.SubmitAnswer:output_type -> interview.SubmitAnswerResponse
	8,  // 24: interview.InterviewService.SubmitInterview:output_type -> interview.SubmitInterviewResponse
	11, // 25: interview.InterviewService.GetInterview:output_type -> interview.GetInterviewResponse
	14, // 26: interview.InterviewService.GetInterviewHistory:output_type -> interview.GetInterviewHistoryResponse
	18, // 27: interview.InterviewService.GetNextQuestion:output_type -> interview.NextQuestionResponse
	20, // 28: interview.InterviewService.GenerateLipSync:output_type -> interview.LipSyncResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_interview_proto_init() }
func file_api_interview_proto_init() {
	if File_api_interview_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_interview_proto_rawDesc), len(file_api_interview_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_interview_proto_goTypes,
		DependencyIndexes: file_api_interview_proto_depIdxs,
		MessageInfos:      file_api_interview_proto_msgTypes,
	}.Build()
	File_api_interview_proto = out.File
	file_api_interview_proto_goTypes = nil
	file_api_interview_proto_depIdxs = nil
}
