// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/interview.proto

package interview

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterviewService_StartInterview_FullMethodName       = "/interview.InterviewService/StartInterview"
	InterviewService_SubmitAnswer_FullMethodName         = "/interview.InterviewService/SubmitAnswer"
	InterviewService_GetInterview_FullMethodName         = "/interview.InterviewService/GetInterview"
	InterviewService_SubmitInterview_FullMethodName      = "/interview.InterviewService/SubmitInterview"
	InterviewService_GetNextQuestion_FullMethodName      = "/interview.InterviewService/GetNextQuestion"
	InterviewService_GetInterviewHistory_FullMethodName  = "/interview.InterviewService/GetInterviewHistory"
	InterviewService_GenerateNextQuestion_FullMethodName = "/interview.InterviewService/GenerateNextQuestion"
	InterviewService_ScoreInterview_FullMethodName       = "/interview.InterviewService/ScoreInterview"
	InterviewService_GenerateLipSync_FullMethodName      = "/interview.InterviewService/GenerateLipSync"
)

// InterviewServiceClient is the client API for InterviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterviewServiceClient interface {
	// Frontend to Irelia
	StartInterview(ctx context.Context, in *StartInterviewRequest, opts ...grpc.CallOption) (*StartInterviewResponse, error)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*GetInterviewResponse, error)
	SubmitInterview(ctx context.Context, in *SubmitInterviewRequest, opts ...grpc.CallOption) (*SubmitInterviewResponse, error)
	GetNextQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	GetInterviewHistory(ctx context.Context, in *GetInterviewHistoryRequest, opts ...grpc.CallOption) (*GetInterviewHistoryResponse, error)
	// Irelia to Darius (Question Generator)
	GenerateNextQuestion(ctx context.Context, in *NextQuestionRequest, opts ...grpc.CallOption) (*NextQuestionResponse, error)
	ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error)
	// Irelia to Karma (Lip Sync)
	GenerateLipSync(ctx context.Context, in *LipSyncRequest, opts ...grpc.CallOption) (*LipSyncResponse, error)
}

type interviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewServiceClient(cc grpc.ClientConnInterface) InterviewServiceClient {
	return &interviewServiceClient{cc}
}

func (c *interviewServiceClient) StartInterview(ctx context.Context, in *StartInterviewRequest, opts ...grpc.CallOption) (*StartInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewService_StartInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, InterviewService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*GetInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewService_GetInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) SubmitInterview(ctx context.Context, in *SubmitInterviewRequest, opts ...grpc.CallOption) (*SubmitInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewService_SubmitInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetNextQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, InterviewService_GetNextQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetInterviewHistory(ctx context.Context, in *GetInterviewHistoryRequest, opts ...grpc.CallOption) (*GetInterviewHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterviewHistoryResponse)
	err := c.cc.Invoke(ctx, InterviewService_GetInterviewHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GenerateNextQuestion(ctx context.Context, in *NextQuestionRequest, opts ...grpc.CallOption) (*NextQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextQuestionResponse)
	err := c.cc.Invoke(ctx, InterviewService_GenerateNextQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewService_ScoreInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GenerateLipSync(ctx context.Context, in *LipSyncRequest, opts ...grpc.CallOption) (*LipSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LipSyncResponse)
	err := c.cc.Invoke(ctx, InterviewService_GenerateLipSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterviewServiceServer is the server API for InterviewService service.
// All implementations should embed UnimplementedInterviewServiceServer
// for forward compatibility.
type InterviewServiceServer interface {
	// Frontend to Irelia
	StartInterview(context.Context, *StartInterviewRequest) (*StartInterviewResponse, error)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	GetInterview(context.Context, *GetInterviewRequest) (*GetInterviewResponse, error)
	SubmitInterview(context.Context, *SubmitInterviewRequest) (*SubmitInterviewResponse, error)
	GetNextQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error)
	GetInterviewHistory(context.Context, *GetInterviewHistoryRequest) (*GetInterviewHistoryResponse, error)
	// Irelia to Darius (Question Generator)
	GenerateNextQuestion(context.Context, *NextQuestionRequest) (*NextQuestionResponse, error)
	ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error)
	// Irelia to Karma (Lip Sync)
	GenerateLipSync(context.Context, *LipSyncRequest) (*LipSyncResponse, error)
}

// UnimplementedInterviewServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterviewServiceServer struct{}

func (UnimplementedInterviewServiceServer) StartInterview(context.Context, *StartInterviewRequest) (*StartInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInterview not implemented")
}
func (UnimplementedInterviewServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedInterviewServiceServer) GetInterview(context.Context, *GetInterviewRequest) (*GetInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterview not implemented")
}
func (UnimplementedInterviewServiceServer) SubmitInterview(context.Context, *SubmitInterviewRequest) (*SubmitInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitInterview not implemented")
}
func (UnimplementedInterviewServiceServer) GetNextQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextQuestion not implemented")
}
func (UnimplementedInterviewServiceServer) GetInterviewHistory(context.Context, *GetInterviewHistoryRequest) (*GetInterviewHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterviewHistory not implemented")
}
func (UnimplementedInterviewServiceServer) GenerateNextQuestion(context.Context, *NextQuestionRequest) (*NextQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNextQuestion not implemented")
}
func (UnimplementedInterviewServiceServer) ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreInterview not implemented")
}
func (UnimplementedInterviewServiceServer) GenerateLipSync(context.Context, *LipSyncRequest) (*LipSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLipSync not implemented")
}
func (UnimplementedInterviewServiceServer) testEmbeddedByValue() {}

// UnsafeInterviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewServiceServer will
// result in compilation errors.
type UnsafeInterviewServiceServer interface {
	mustEmbedUnimplementedInterviewServiceServer()
}

func RegisterInterviewServiceServer(s grpc.ServiceRegistrar, srv InterviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterviewService_ServiceDesc, srv)
}

func _InterviewService_StartInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).StartInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_StartInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).StartInterview(ctx, req.(*StartInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GetInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetInterview(ctx, req.(*GetInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_SubmitInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).SubmitInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_SubmitInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).SubmitInterview(ctx, req.(*SubmitInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetNextQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetNextQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GetNextQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetNextQuestion(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetInterviewHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetInterviewHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GetInterviewHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetInterviewHistory(ctx, req.(*GetInterviewHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GenerateNextQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GenerateNextQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GenerateNextQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GenerateNextQuestion(ctx, req.(*NextQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_ScoreInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).ScoreInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_ScoreInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).ScoreInterview(ctx, req.(*ScoreInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GenerateLipSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GenerateLipSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GenerateLipSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GenerateLipSync(ctx, req.(*LipSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterviewService_ServiceDesc is the grpc.ServiceDesc for InterviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interview.InterviewService",
	HandlerType: (*InterviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartInterview",
			Handler:    _InterviewService_StartInterview_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _InterviewService_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetInterview",
			Handler:    _InterviewService_GetInterview_Handler,
		},
		{
			MethodName: "SubmitInterview",
			Handler:    _InterviewService_SubmitInterview_Handler,
		},
		{
			MethodName: "GetNextQuestion",
			Handler:    _InterviewService_GetNextQuestion_Handler,
		},
		{
			MethodName: "GetInterviewHistory",
			Handler:    _InterviewService_GetInterviewHistory_Handler,
		},
		{
			MethodName: "GenerateNextQuestion",
			Handler:    _InterviewService_GenerateNextQuestion_Handler,
		},
		{
			MethodName: "ScoreInterview",
			Handler:    _InterviewService_ScoreInterview_Handler,
		},
		{
			MethodName: "GenerateLipSync",
			Handler:    _InterviewService_GenerateLipSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interview.proto",
}
