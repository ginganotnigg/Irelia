// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/irelia.proto

package irelia

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ======================================== ENUM =======================================
type InterviewStatus int32

const (
	InterviewStatus_INTERVIEW_STATUS_UNKNOWN     InterviewStatus = 0
	InterviewStatus_INTERVIEW_STATUS_IN_PROGRESS InterviewStatus = 1
	InterviewStatus_INTERVIEW_STATUS_PENDING     InterviewStatus = 2
	InterviewStatus_INTERVIEW_STATUS_FAILED      InterviewStatus = 3
	InterviewStatus_INTERVIEW_STATUS_COMPLETED   InterviewStatus = 4
)

// Enum value maps for InterviewStatus.
var (
	InterviewStatus_name = map[int32]string{
		0: "INTERVIEW_STATUS_UNKNOWN",
		1: "INTERVIEW_STATUS_IN_PROGRESS",
		2: "INTERVIEW_STATUS_PENDING",
		3: "INTERVIEW_STATUS_FAILED",
		4: "INTERVIEW_STATUS_COMPLETED",
	}
	InterviewStatus_value = map[string]int32{
		"INTERVIEW_STATUS_UNKNOWN":     0,
		"INTERVIEW_STATUS_IN_PROGRESS": 1,
		"INTERVIEW_STATUS_PENDING":     2,
		"INTERVIEW_STATUS_FAILED":      3,
		"INTERVIEW_STATUS_COMPLETED":   4,
	}
)

func (x InterviewStatus) Enum() *InterviewStatus {
	p := new(InterviewStatus)
	*p = x
	return p
}

func (x InterviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_irelia_proto_enumTypes[0].Descriptor()
}

func (InterviewStatus) Type() protoreflect.EnumType {
	return &file_api_irelia_proto_enumTypes[0]
}

func (x InterviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterviewStatus.Descriptor instead.
func (InterviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{0}
}

type QuestionStatus int32

const (
	QuestionStatus_QUESTION_STATUS_UNKNOWN  QuestionStatus = 0
	QuestionStatus_QUESTION_STATUS_NEW      QuestionStatus = 1
	QuestionStatus_QUESTION_STATUS_ANSWERED QuestionStatus = 2
	QuestionStatus_QUESTION_STATUS_SKIPPED  QuestionStatus = 3
	QuestionStatus_QUESTION_STATUS_FAILED   QuestionStatus = 4
	QuestionStatus_QUESTION_STATUS_RATED    QuestionStatus = 5
)

// Enum value maps for QuestionStatus.
var (
	QuestionStatus_name = map[int32]string{
		0: "QUESTION_STATUS_UNKNOWN",
		1: "QUESTION_STATUS_NEW",
		2: "QUESTION_STATUS_ANSWERED",
		3: "QUESTION_STATUS_SKIPPED",
		4: "QUESTION_STATUS_FAILED",
		5: "QUESTION_STATUS_RATED",
	}
	QuestionStatus_value = map[string]int32{
		"QUESTION_STATUS_UNKNOWN":  0,
		"QUESTION_STATUS_NEW":      1,
		"QUESTION_STATUS_ANSWERED": 2,
		"QUESTION_STATUS_SKIPPED":  3,
		"QUESTION_STATUS_FAILED":   4,
		"QUESTION_STATUS_RATED":    5,
	}
)

func (x QuestionStatus) Enum() *QuestionStatus {
	p := new(QuestionStatus)
	*p = x
	return p
}

func (x QuestionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_irelia_proto_enumTypes[1].Descriptor()
}

func (QuestionStatus) Type() protoreflect.EnumType {
	return &file_api_irelia_proto_enumTypes[1]
}

func (x QuestionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionStatus.Descriptor instead.
func (QuestionStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{1}
}

type SortType int32

const (
	SortType_SORT_TYPE_UNKNOWN SortType = 0
	SortType_SORT_TYPE_ASC     SortType = 1
	SortType_SORT_TYPE_DESC    SortType = 2
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "SORT_TYPE_UNKNOWN",
		1: "SORT_TYPE_ASC",
		2: "SORT_TYPE_DESC",
	}
	SortType_value = map[string]int32{
		"SORT_TYPE_UNKNOWN": 0,
		"SORT_TYPE_ASC":     1,
		"SORT_TYPE_DESC":    2,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_irelia_proto_enumTypes[2].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_api_irelia_proto_enumTypes[2]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{2}
}

type BulbasaurRole int32

const (
	BulbasaurRole_ROLE_UNKNOWN          BulbasaurRole = 0
	BulbasaurRole_ROLE_CANDIDATE        BulbasaurRole = 1
	BulbasaurRole_ROLE_BUSINESS_MANAGER BulbasaurRole = 2
)

// Enum value maps for BulbasaurRole.
var (
	BulbasaurRole_name = map[int32]string{
		0: "ROLE_UNKNOWN",
		1: "ROLE_CANDIDATE",
		2: "ROLE_BUSINESS_MANAGER",
	}
	BulbasaurRole_value = map[string]int32{
		"ROLE_UNKNOWN":          0,
		"ROLE_CANDIDATE":        1,
		"ROLE_BUSINESS_MANAGER": 2,
	}
)

func (x BulbasaurRole) Enum() *BulbasaurRole {
	p := new(BulbasaurRole)
	*p = x
	return p
}

func (x BulbasaurRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulbasaurRole) Descriptor() protoreflect.EnumDescriptor {
	return file_api_irelia_proto_enumTypes[3].Descriptor()
}

func (BulbasaurRole) Type() protoreflect.EnumType {
	return &file_api_irelia_proto_enumTypes[3]
}

func (x BulbasaurRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulbasaurRole.Descriptor instead.
func (BulbasaurRole) EnumDescriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{3}
}

type BaseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	mi := &file_api_irelia_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{0}
}

func (x *BaseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BaseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SortMethod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          SortType               `protobuf:"varint,2,opt,name=type,proto3,enum=irelia.SortType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortMethod) Reset() {
	*x = SortMethod{}
	mi := &file_api_irelia_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMethod) ProtoMessage() {}

func (x *SortMethod) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMethod.ProtoReflect.Descriptor instead.
func (*SortMethod) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{1}
}

func (x *SortMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SortMethod) GetType() SortType {
	if x != nil {
		return x.Type
	}
	return SortType_SORT_TYPE_UNKNOWN
}

// Database
type Interview struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position           string                 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Experience         string                 `protobuf:"bytes,3,opt,name=experience,proto3" json:"experience,omitempty"`
	Language           string                 `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	VoiceId            string                 `protobuf:"bytes,5,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Speed              int32                  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	Skills             []string               `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	SkillsScore        []string               `protobuf:"bytes,8,rep,name=skills_score,json=skillsScore,proto3" json:"skills_score,omitempty"`
	SkipCode           bool                   `protobuf:"varint,9,opt,name=skip_code,json=skipCode,proto3" json:"skip_code,omitempty"`
	TotalQuestions     int32                  `protobuf:"varint,10,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	RemainingQuestions int32                  `protobuf:"varint,11,opt,name=remaining_questions,json=remainingQuestions,proto3" json:"remaining_questions,omitempty"`
	TotalScore         *TotalScore            `protobuf:"bytes,12,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	PositiveFeedback   string                 `protobuf:"bytes,13,opt,name=positive_feedback,json=positiveFeedback,proto3" json:"positive_feedback,omitempty"`
	ActionableFeedback string                 `protobuf:"bytes,14,opt,name=actionable_feedback,json=actionableFeedback,proto3" json:"actionable_feedback,omitempty"`
	FinalComment       string                 `protobuf:"bytes,15,opt,name=final_comment,json=finalComment,proto3" json:"final_comment,omitempty"`
	Status             InterviewStatus        `protobuf:"varint,16,opt,name=status,proto3,enum=irelia.InterviewStatus" json:"status,omitempty"`
	BaseData           *BaseData              `protobuf:"bytes,17,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Interview) Reset() {
	*x = Interview{}
	mi := &file_api_irelia_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interview) ProtoMessage() {}

func (x *Interview) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interview.ProtoReflect.Descriptor instead.
func (*Interview) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{2}
}

func (x *Interview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interview) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Interview) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *Interview) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Interview) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *Interview) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Interview) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Interview) GetSkillsScore() []string {
	if x != nil {
		return x.SkillsScore
	}
	return nil
}

func (x *Interview) GetSkipCode() bool {
	if x != nil {
		return x.SkipCode
	}
	return false
}

func (x *Interview) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *Interview) GetRemainingQuestions() int32 {
	if x != nil {
		return x.RemainingQuestions
	}
	return 0
}

func (x *Interview) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *Interview) GetPositiveFeedback() string {
	if x != nil {
		return x.PositiveFeedback
	}
	return ""
}

func (x *Interview) GetActionableFeedback() string {
	if x != nil {
		return x.ActionableFeedback
	}
	return ""
}

func (x *Interview) GetFinalComment() string {
	if x != nil {
		return x.FinalComment
	}
	return ""
}

func (x *Interview) GetStatus() InterviewStatus {
	if x != nil {
		return x.Status
	}
	return InterviewStatus_INTERVIEW_STATUS_UNKNOWN
}

func (x *Interview) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Audio         string                 `protobuf:"bytes,4,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync       *LipSyncData           `protobuf:"bytes,5,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	Answer        string                 `protobuf:"bytes,6,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,7,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	Comment       string                 `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Score         string                 `protobuf:"bytes,9,opt,name=score,proto3" json:"score,omitempty"`
	Status        QuestionStatus         `protobuf:"varint,10,opt,name=status,proto3,enum=irelia.QuestionStatus" json:"status,omitempty"`
	BaseData      *BaseData              `protobuf:"bytes,11,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_api_irelia_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{3}
}

func (x *Question) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *Question) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *Question) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

func (x *Question) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Question) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

func (x *Question) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Question) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Question) GetStatus() QuestionStatus {
	if x != nil {
		return x.Status
	}
	return QuestionStatus_QUESTION_STATUS_UNKNOWN
}

func (x *Question) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

// 1. Start Interview
type StartInterviewRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Position       string                 `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Experience     string                 `protobuf:"bytes,2,opt,name=experience,proto3" json:"experience,omitempty"`
	Language       string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Models         string                 `protobuf:"bytes,4,opt,name=models,proto3" json:"models,omitempty"`
	Speed          int32                  `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	Skills         []string               `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty"`
	TotalQuestions int32                  `protobuf:"varint,7,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	SkipIntro      bool                   `protobuf:"varint,8,opt,name=skip_intro,json=skipIntro,proto3" json:"skip_intro,omitempty"`
	SkipCode       bool                   `protobuf:"varint,9,opt,name=skip_code,json=skipCode,proto3" json:"skip_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartInterviewRequest) Reset() {
	*x = StartInterviewRequest{}
	mi := &file_api_irelia_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInterviewRequest) ProtoMessage() {}

func (x *StartInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInterviewRequest.ProtoReflect.Descriptor instead.
func (*StartInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{4}
}

func (x *StartInterviewRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StartInterviewRequest) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *StartInterviewRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *StartInterviewRequest) GetModels() string {
	if x != nil {
		return x.Models
	}
	return ""
}

func (x *StartInterviewRequest) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *StartInterviewRequest) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *StartInterviewRequest) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *StartInterviewRequest) GetSkipIntro() bool {
	if x != nil {
		return x.SkipIntro
	}
	return false
}

func (x *StartInterviewRequest) GetSkipCode() bool {
	if x != nil {
		return x.SkipCode
	}
	return false
}

type StartInterviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartInterviewResponse) Reset() {
	*x = StartInterviewResponse{}
	mi := &file_api_irelia_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInterviewResponse) ProtoMessage() {}

func (x *StartInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInterviewResponse.ProtoReflect.Descriptor instead.
func (*StartInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{5}
}

func (x *StartInterviewResponse) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

// 2. Get Next Question
type QuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	QuestionIndex int32                  `protobuf:"varint,2,opt,name=question_index,json=questionIndex,proto3" json:"question_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionRequest) Reset() {
	*x = QuestionRequest{}
	mi := &file_api_irelia_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionRequest) ProtoMessage() {}

func (x *QuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionRequest.ProtoReflect.Descriptor instead.
func (*QuestionRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *QuestionRequest) GetQuestionIndex() int32 {
	if x != nil {
		return x.QuestionIndex
	}
	return 0
}

type QuestionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QuestionId     int32                  `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Content        string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Audio          string                 `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync        *LipSyncData           `protobuf:"bytes,4,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	IsLastQuestion bool                   `protobuf:"varint,5,opt,name=is_last_question,json=isLastQuestion,proto3" json:"is_last_question,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QuestionResponse) Reset() {
	*x = QuestionResponse{}
	mi := &file_api_irelia_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResponse) ProtoMessage() {}

func (x *QuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResponse.ProtoReflect.Descriptor instead.
func (*QuestionResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionResponse) GetQuestionId() int32 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *QuestionResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionResponse) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *QuestionResponse) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

func (x *QuestionResponse) GetIsLastQuestion() bool {
	if x != nil {
		return x.IsLastQuestion
	}
	return false
}

// 3. Submit Answer
type SubmitAnswerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,4,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_api_irelia_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitAnswerRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SubmitAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *SubmitAnswerRequest) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_api_irelia_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitAnswerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 4. Submit Interview
type SubmitInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitInterviewRequest) Reset() {
	*x = SubmitInterviewRequest{}
	mi := &file_api_irelia_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitInterviewRequest) ProtoMessage() {}

func (x *SubmitInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitInterviewRequest.ProtoReflect.Descriptor instead.
func (*SubmitInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

type SubmitInterviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Outro         *LipSyncResponse       `protobuf:"bytes,1,opt,name=outro,proto3" json:"outro,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitInterviewResponse) Reset() {
	*x = SubmitInterviewResponse{}
	mi := &file_api_irelia_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitInterviewResponse) ProtoMessage() {}

func (x *SubmitInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitInterviewResponse.ProtoReflect.Descriptor instead.
func (*SubmitInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitInterviewResponse) GetOutro() *LipSyncResponse {
	if x != nil {
		return x.Outro
	}
	return nil
}

type AnswerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   *string                `protobuf:"bytes,3,opt,name=record_proof,json=recordProof,proto3,oneof" json:"record_proof,omitempty"`
	Question      *string                `protobuf:"bytes,4,opt,name=question,proto3,oneof" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerData) Reset() {
	*x = AnswerData{}
	mi := &file_api_irelia_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerData) ProtoMessage() {}

func (x *AnswerData) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerData.ProtoReflect.Descriptor instead.
func (*AnswerData) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{12}
}

func (x *AnswerData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AnswerData) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerData) GetRecordProof() string {
	if x != nil && x.RecordProof != nil {
		return *x.RecordProof
	}
	return ""
}

func (x *AnswerData) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

// 5. Get Interview History
type GetInterviewHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageIndex     int32                  `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchContent *string                `protobuf:"bytes,3,opt,name=search_content,json=searchContent,proto3,oneof" json:"search_content,omitempty"`
	IsFavorite    *bool                  `protobuf:"varint,4,opt,name=is_favorite,json=isFavorite,proto3,oneof" json:"is_favorite,omitempty"`
	Sort          []*SortMethod          `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	From          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewHistoryRequest) Reset() {
	*x = GetInterviewHistoryRequest{}
	mi := &file_api_irelia_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewHistoryRequest) ProtoMessage() {}

func (x *GetInterviewHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetInterviewHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{13}
}

func (x *GetInterviewHistoryRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetInterviewHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetInterviewHistoryRequest) GetSearchContent() string {
	if x != nil && x.SearchContent != nil {
		return *x.SearchContent
	}
	return ""
}

func (x *GetInterviewHistoryRequest) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *GetInterviewHistoryRequest) GetSort() []*SortMethod {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *GetInterviewHistoryRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetInterviewHistoryRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GetInterviewHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage       int32                  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	TotalPages    int32                  `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Interviews    []*InterviewSummary    `protobuf:"bytes,4,rep,name=interviews,proto3" json:"interviews,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewHistoryResponse) Reset() {
	*x = GetInterviewHistoryResponse{}
	mi := &file_api_irelia_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewHistoryResponse) ProtoMessage() {}

func (x *GetInterviewHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetInterviewHistoryResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{14}
}

func (x *GetInterviewHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetInterviewHistoryResponse) GetInterviews() []*InterviewSummary {
	if x != nil {
		return x.Interviews
	}
	return nil
}

type InterviewSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Position      string                 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Experience    string                 `protobuf:"bytes,3,opt,name=experience,proto3" json:"experience,omitempty"`
	TotalScore    *TotalScore            `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	BaseData      *BaseData              `protobuf:"bytes,5,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterviewSummary) Reset() {
	*x = InterviewSummary{}
	mi := &file_api_irelia_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterviewSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterviewSummary) ProtoMessage() {}

func (x *InterviewSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterviewSummary.ProtoReflect.Descriptor instead.
func (*InterviewSummary) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{15}
}

func (x *InterviewSummary) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *InterviewSummary) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *InterviewSummary) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *InterviewSummary) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *InterviewSummary) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

// 6. Get Interview
type GetInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterviewRequest) Reset() {
	*x = GetInterviewRequest{}
	mi := &file_api_irelia_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewRequest) ProtoMessage() {}

func (x *GetInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewRequest.ProtoReflect.Descriptor instead.
func (*GetInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{16}
}

func (x *GetInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

type AnswerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	RecordProof   string                 `protobuf:"bytes,4,opt,name=record_proof,json=recordProof,proto3" json:"record_proof,omitempty"`
	Comment       string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Score         string                 `protobuf:"bytes,6,opt,name=score,proto3" json:"score,omitempty"` // "A", "B", "C", "D", "F"
	Status        QuestionStatus         `protobuf:"varint,7,opt,name=status,proto3,enum=irelia.QuestionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerResult) Reset() {
	*x = AnswerResult{}
	mi := &file_api_irelia_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResult) ProtoMessage() {}

func (x *AnswerResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResult.ProtoReflect.Descriptor instead.
func (*AnswerResult) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{17}
}

func (x *AnswerResult) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AnswerResult) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnswerResult) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerResult) GetRecordProof() string {
	if x != nil {
		return x.RecordProof
	}
	return ""
}

func (x *AnswerResult) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AnswerResult) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AnswerResult) GetStatus() QuestionStatus {
	if x != nil {
		return x.Status
	}
	return QuestionStatus_QUESTION_STATUS_UNKNOWN
}

type TotalScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B             int32                  `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
	C             int32                  `protobuf:"varint,3,opt,name=C,proto3" json:"C,omitempty"`
	D             int32                  `protobuf:"varint,4,opt,name=D,proto3" json:"D,omitempty"`
	F             int32                  `protobuf:"varint,5,opt,name=F,proto3" json:"F,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalScore) Reset() {
	*x = TotalScore{}
	mi := &file_api_irelia_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalScore) ProtoMessage() {}

func (x *TotalScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalScore.ProtoReflect.Descriptor instead.
func (*TotalScore) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{18}
}

func (x *TotalScore) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *TotalScore) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *TotalScore) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *TotalScore) GetD() int32 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *TotalScore) GetF() int32 {
	if x != nil {
		return x.F
	}
	return 0
}

type GetInterviewResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InterviewId        string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions        []*AnswerResult        `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	SkillsScore        map[string]string      `protobuf:"bytes,3,rep,name=skills_score,json=skillsScore,proto3" json:"skills_score,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalScore         *TotalScore            `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	PositiveFeedback   string                 `protobuf:"bytes,5,opt,name=positive_feedback,json=positiveFeedback,proto3" json:"positive_feedback,omitempty"`
	ActionableFeedback string                 `protobuf:"bytes,6,opt,name=actionable_feedback,json=actionableFeedback,proto3" json:"actionable_feedback,omitempty"`
	FinalComment       string                 `protobuf:"bytes,7,opt,name=final_comment,json=finalComment,proto3" json:"final_comment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetInterviewResponse) Reset() {
	*x = GetInterviewResponse{}
	mi := &file_api_irelia_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterviewResponse) ProtoMessage() {}

func (x *GetInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterviewResponse.ProtoReflect.Descriptor instead.
func (*GetInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{19}
}

func (x *GetInterviewResponse) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *GetInterviewResponse) GetSubmissions() []*AnswerResult {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *GetInterviewResponse) GetSkillsScore() map[string]string {
	if x != nil {
		return x.SkillsScore
	}
	return nil
}

func (x *GetInterviewResponse) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *GetInterviewResponse) GetPositiveFeedback() string {
	if x != nil {
		return x.PositiveFeedback
	}
	return ""
}

func (x *GetInterviewResponse) GetActionableFeedback() string {
	if x != nil {
		return x.ActionableFeedback
	}
	return ""
}

func (x *GetInterviewResponse) GetFinalComment() string {
	if x != nil {
		return x.FinalComment
	}
	return ""
}

// 6. Generate Next Question
type QaPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      string                 `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QaPair) Reset() {
	*x = QaPair{}
	mi := &file_api_irelia_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QaPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QaPair) ProtoMessage() {}

func (x *QaPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QaPair.ProtoReflect.Descriptor instead.
func (*QaPair) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{20}
}

func (x *QaPair) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QaPair) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type Context struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Position       string                 `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Experience     string                 `protobuf:"bytes,2,opt,name=experience,proto3" json:"experience,omitempty"`
	Language       string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Skills         []string               `protobuf:"bytes,4,rep,name=skills,proto3" json:"skills,omitempty"`
	TotalQuestions int32                  `protobuf:"varint,5,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	SkipCode       bool                   `protobuf:"varint,6,opt,name=skip_code,json=skipCode,proto3" json:"skip_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_api_irelia_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{21}
}

func (x *Context) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Context) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *Context) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Context) GetSkills() []string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Context) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *Context) GetSkipCode() bool {
	if x != nil {
		return x.SkipCode
	}
	return false
}

type NextQuestionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InterviewId        string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions        []*QaPair              `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Context            *Context               `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	RemainingQuestions int32                  `protobuf:"varint,4,opt,name=remaining_questions,json=remainingQuestions,proto3" json:"remaining_questions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NextQuestionRequest) Reset() {
	*x = NextQuestionRequest{}
	mi := &file_api_irelia_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextQuestionRequest) ProtoMessage() {}

func (x *NextQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextQuestionRequest.ProtoReflect.Descriptor instead.
func (*NextQuestionRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{22}
}

func (x *NextQuestionRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *NextQuestionRequest) GetSubmissions() []*QaPair {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *NextQuestionRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *NextQuestionRequest) GetRemainingQuestions() int32 {
	if x != nil {
		return x.RemainingQuestions
	}
	return 0
}

type NextQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Questions     []string               `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextQuestionResponse) Reset() {
	*x = NextQuestionResponse{}
	mi := &file_api_irelia_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextQuestionResponse) ProtoMessage() {}

func (x *NextQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextQuestionResponse.ProtoReflect.Descriptor instead.
func (*NextQuestionResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{23}
}

func (x *NextQuestionResponse) GetQuestions() []string {
	if x != nil {
		return x.Questions
	}
	return nil
}

// 7. Favorite Interview
type FavoriteInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FavoriteInterviewRequest) Reset() {
	*x = FavoriteInterviewRequest{}
	mi := &file_api_irelia_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavoriteInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteInterviewRequest) ProtoMessage() {}

func (x *FavoriteInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteInterviewRequest.ProtoReflect.Descriptor instead.
func (*FavoriteInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{24}
}

func (x *FavoriteInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

// 8. Score Interview
type ScoreInterviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions   []*AnswerData          `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreInterviewRequest) Reset() {
	*x = ScoreInterviewRequest{}
	mi := &file_api_irelia_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreInterviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreInterviewRequest) ProtoMessage() {}

func (x *ScoreInterviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreInterviewRequest.ProtoReflect.Descriptor instead.
func (*ScoreInterviewRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{25}
}

func (x *ScoreInterviewRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *ScoreInterviewRequest) GetSubmissions() []*AnswerData {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type ScoreFluencyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Submissions   []*AnswerData          `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreFluencyRequest) Reset() {
	*x = ScoreFluencyRequest{}
	mi := &file_api_irelia_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreFluencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreFluencyRequest) ProtoMessage() {}

func (x *ScoreFluencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreFluencyRequest.ProtoReflect.Descriptor instead.
func (*ScoreFluencyRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{26}
}

func (x *ScoreFluencyRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *ScoreFluencyRequest) GetSubmissions() []*AnswerData {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type AnswerScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Score         string                 `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerScore) Reset() {
	*x = AnswerScore{}
	mi := &file_api_irelia_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerScore) ProtoMessage() {}

func (x *AnswerScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerScore.ProtoReflect.Descriptor instead.
func (*AnswerScore) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{27}
}

func (x *AnswerScore) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AnswerScore) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AnswerScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type SkillScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Skill         string                 `protobuf:"bytes,1,opt,name=skill,proto3" json:"skill,omitempty"`
	Score         string                 `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkillScore) Reset() {
	*x = SkillScore{}
	mi := &file_api_irelia_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillScore) ProtoMessage() {}

func (x *SkillScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillScore.ProtoReflect.Descriptor instead.
func (*SkillScore) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{28}
}

func (x *SkillScore) GetSkill() string {
	if x != nil {
		return x.Skill
	}
	return ""
}

func (x *SkillScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type ScoreInterviewResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Result             []*AnswerScore         `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	TotalScore         *TotalScore            `protobuf:"bytes,2,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Skills             []*SkillScore          `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty"`
	PositiveFeedback   string                 `protobuf:"bytes,4,opt,name=positive_feedback,json=positiveFeedback,proto3" json:"positive_feedback,omitempty"`
	ActionableFeedback string                 `protobuf:"bytes,5,opt,name=actionable_feedback,json=actionableFeedback,proto3" json:"actionable_feedback,omitempty"`
	FinalComment       string                 `protobuf:"bytes,6,opt,name=final_comment,json=finalComment,proto3" json:"final_comment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ScoreInterviewResponse) Reset() {
	*x = ScoreInterviewResponse{}
	mi := &file_api_irelia_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreInterviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreInterviewResponse) ProtoMessage() {}

func (x *ScoreInterviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreInterviewResponse.ProtoReflect.Descriptor instead.
func (*ScoreInterviewResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{29}
}

func (x *ScoreInterviewResponse) GetResult() []*AnswerScore {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ScoreInterviewResponse) GetTotalScore() *TotalScore {
	if x != nil {
		return x.TotalScore
	}
	return nil
}

func (x *ScoreInterviewResponse) GetSkills() []*SkillScore {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ScoreInterviewResponse) GetPositiveFeedback() string {
	if x != nil {
		return x.PositiveFeedback
	}
	return ""
}

func (x *ScoreInterviewResponse) GetActionableFeedback() string {
	if x != nil {
		return x.ActionableFeedback
	}
	return ""
}

func (x *ScoreInterviewResponse) GetFinalComment() string {
	if x != nil {
		return x.FinalComment
	}
	return ""
}

type ScoreFluencyResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Result             []*AnswerScore         `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Skills             map[string]string      `protobuf:"bytes,2,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ActionableFeedback string                 `protobuf:"bytes,3,opt,name=actionable_feedback,json=actionableFeedback,proto3" json:"actionable_feedback,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ScoreFluencyResponse) Reset() {
	*x = ScoreFluencyResponse{}
	mi := &file_api_irelia_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreFluencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreFluencyResponse) ProtoMessage() {}

func (x *ScoreFluencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreFluencyResponse.ProtoReflect.Descriptor instead.
func (*ScoreFluencyResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{30}
}

func (x *ScoreFluencyResponse) GetResult() []*AnswerScore {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ScoreFluencyResponse) GetSkills() map[string]string {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ScoreFluencyResponse) GetActionableFeedback() string {
	if x != nil {
		return x.ActionableFeedback
	}
	return ""
}

// 9. Generate Lip Sync
type LipSyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterviewId   string                 `protobuf:"bytes,1,opt,name=interview_id,json=interviewId,proto3" json:"interview_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	VoiceId       string                 `protobuf:"bytes,3,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Speed         int32                  `protobuf:"varint,4,opt,name=speed,proto3" json:"speed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncRequest) Reset() {
	*x = LipSyncRequest{}
	mi := &file_api_irelia_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncRequest) ProtoMessage() {}

func (x *LipSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncRequest.ProtoReflect.Descriptor instead.
func (*LipSyncRequest) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{31}
}

func (x *LipSyncRequest) GetInterviewId() string {
	if x != nil {
		return x.InterviewId
	}
	return ""
}

func (x *LipSyncRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LipSyncRequest) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *LipSyncRequest) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type LipSyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         string                 `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Lipsync       *LipSyncData           `protobuf:"bytes,2,opt,name=lipsync,proto3" json:"lipsync,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncResponse) Reset() {
	*x = LipSyncResponse{}
	mi := &file_api_irelia_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncResponse) ProtoMessage() {}

func (x *LipSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncResponse.ProtoReflect.Descriptor instead.
func (*LipSyncResponse) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{32}
}

func (x *LipSyncResponse) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *LipSyncResponse) GetLipsync() *LipSyncData {
	if x != nil {
		return x.Lipsync
	}
	return nil
}

type LipSyncData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *LipSyncMetadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MouthCues     []*MouthCue            `protobuf:"bytes,2,rep,name=mouth_cues,json=mouthCues,proto3" json:"mouth_cues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncData) Reset() {
	*x = LipSyncData{}
	mi := &file_api_irelia_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncData) ProtoMessage() {}

func (x *LipSyncData) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncData.ProtoReflect.Descriptor instead.
func (*LipSyncData) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{33}
}

func (x *LipSyncData) GetMetadata() *LipSyncMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LipSyncData) GetMouthCues() []*MouthCue {
	if x != nil {
		return x.MouthCues
	}
	return nil
}

type LipSyncMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SoundFile     string                 `protobuf:"bytes,1,opt,name=sound_file,json=soundFile,proto3" json:"sound_file,omitempty"`
	Duration      float32                `protobuf:"fixed32,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LipSyncMetadata) Reset() {
	*x = LipSyncMetadata{}
	mi := &file_api_irelia_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LipSyncMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipSyncMetadata) ProtoMessage() {}

func (x *LipSyncMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipSyncMetadata.ProtoReflect.Descriptor instead.
func (*LipSyncMetadata) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{34}
}

func (x *LipSyncMetadata) GetSoundFile() string {
	if x != nil {
		return x.SoundFile
	}
	return ""
}

func (x *LipSyncMetadata) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type MouthCue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float32                `protobuf:"fixed32,1,opt,name=start,proto3" json:"start,omitempty"`
	End           float32                `protobuf:"fixed32,2,opt,name=end,proto3" json:"end,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MouthCue) Reset() {
	*x = MouthCue{}
	mi := &file_api_irelia_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MouthCue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouthCue) ProtoMessage() {}

func (x *MouthCue) ProtoReflect() protoreflect.Message {
	mi := &file_api_irelia_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouthCue.ProtoReflect.Descriptor instead.
func (*MouthCue) Descriptor() ([]byte, []int) {
	return file_api_irelia_proto_rawDescGZIP(), []int{35}
}

func (x *MouthCue) GetStart() float32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *MouthCue) GetEnd() float32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *MouthCue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_api_irelia_proto protoreflect.FileDescriptor

var file_api_irelia_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x0a, 0x53, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xee, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xec, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x69, 0x70, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3b,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x2d,
	0x0a, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x6f, 0x75, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x72, 0x6f, 0x22, 0xa1, 0x01, 0x0a,
	0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd1, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xd5,
	0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x42, 0x12, 0x0c, 0x0a, 0x01, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x43, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x46, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x46,
	0x22, 0xbb, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3e,
	0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c,
	0x0a, 0x06, 0x51, 0x61, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x51, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3d, 0x0a,
	0x18, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x15,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e,
	0x0a, 0x13, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53,
	0x0a, 0x0b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa9, 0x02,
	0x0a, 0x16, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6c,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a,
	0x0e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x56, 0x0a,
	0x0f, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x69, 0x70, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x69,
	0x70, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x73, 0x0a, 0x0b, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e,
	0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x74, 0x68, 0x5f, 0x63, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x43, 0x75, 0x65, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x43, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0f, 0x4c, 0x69,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x08, 0x4d, 0x6f, 0x75, 0x74,
	0x68, 0x43, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0xac, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x2a, 0xb8, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x48, 0x0a, 0x08,
	0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x43,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0d, 0x42, 0x75, 0x6c, 0x62, 0x61, 0x73,
	0x61, 0x75, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x32, 0xe3, 0x09, 0x0a, 0x06, 0x49, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x12, 0x6d, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22,
	0x11, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0x77, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x7d, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x12, 0x7b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x75, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x2e, 0x69, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x69,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x0e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d,
	0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x72, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x2e,
	0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4c, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2e, 0x4c,
	0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x70, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x13,
	0x5a, 0x11, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x69, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_irelia_proto_rawDescOnce sync.Once
	file_api_irelia_proto_rawDescData []byte
)

func file_api_irelia_proto_rawDescGZIP() []byte {
	file_api_irelia_proto_rawDescOnce.Do(func() {
		file_api_irelia_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_irelia_proto_rawDesc), len(file_api_irelia_proto_rawDesc)))
	})
	return file_api_irelia_proto_rawDescData
}

var file_api_irelia_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_irelia_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_api_irelia_proto_goTypes = []any{
	(InterviewStatus)(0),                // 0: irelia.InterviewStatus
	(QuestionStatus)(0),                 // 1: irelia.QuestionStatus
	(SortType)(0),                       // 2: irelia.SortType
	(BulbasaurRole)(0),                  // 3: irelia.BulbasaurRole
	(*BaseData)(nil),                    // 4: irelia.BaseData
	(*SortMethod)(nil),                  // 5: irelia.SortMethod
	(*Interview)(nil),                   // 6: irelia.Interview
	(*Question)(nil),                    // 7: irelia.Question
	(*StartInterviewRequest)(nil),       // 8: irelia.StartInterviewRequest
	(*StartInterviewResponse)(nil),      // 9: irelia.StartInterviewResponse
	(*QuestionRequest)(nil),             // 10: irelia.QuestionRequest
	(*QuestionResponse)(nil),            // 11: irelia.QuestionResponse
	(*SubmitAnswerRequest)(nil),         // 12: irelia.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),        // 13: irelia.SubmitAnswerResponse
	(*SubmitInterviewRequest)(nil),      // 14: irelia.SubmitInterviewRequest
	(*SubmitInterviewResponse)(nil),     // 15: irelia.SubmitInterviewResponse
	(*AnswerData)(nil),                  // 16: irelia.AnswerData
	(*GetInterviewHistoryRequest)(nil),  // 17: irelia.GetInterviewHistoryRequest
	(*GetInterviewHistoryResponse)(nil), // 18: irelia.GetInterviewHistoryResponse
	(*InterviewSummary)(nil),            // 19: irelia.InterviewSummary
	(*GetInterviewRequest)(nil),         // 20: irelia.GetInterviewRequest
	(*AnswerResult)(nil),                // 21: irelia.AnswerResult
	(*TotalScore)(nil),                  // 22: irelia.TotalScore
	(*GetInterviewResponse)(nil),        // 23: irelia.GetInterviewResponse
	(*QaPair)(nil),                      // 24: irelia.QaPair
	(*Context)(nil),                     // 25: irelia.Context
	(*NextQuestionRequest)(nil),         // 26: irelia.NextQuestionRequest
	(*NextQuestionResponse)(nil),        // 27: irelia.NextQuestionResponse
	(*FavoriteInterviewRequest)(nil),    // 28: irelia.FavoriteInterviewRequest
	(*ScoreInterviewRequest)(nil),       // 29: irelia.ScoreInterviewRequest
	(*ScoreFluencyRequest)(nil),         // 30: irelia.ScoreFluencyRequest
	(*AnswerScore)(nil),                 // 31: irelia.AnswerScore
	(*SkillScore)(nil),                  // 32: irelia.SkillScore
	(*ScoreInterviewResponse)(nil),      // 33: irelia.ScoreInterviewResponse
	(*ScoreFluencyResponse)(nil),        // 34: irelia.ScoreFluencyResponse
	(*LipSyncRequest)(nil),              // 35: irelia.LipSyncRequest
	(*LipSyncResponse)(nil),             // 36: irelia.LipSyncResponse
	(*LipSyncData)(nil),                 // 37: irelia.LipSyncData
	(*LipSyncMetadata)(nil),             // 38: irelia.LipSyncMetadata
	(*MouthCue)(nil),                    // 39: irelia.MouthCue
	nil,                                 // 40: irelia.GetInterviewResponse.SkillsScoreEntry
	nil,                                 // 41: irelia.ScoreFluencyResponse.SkillsEntry
	(*timestamppb.Timestamp)(nil),       // 42: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 43: google.protobuf.Empty
}
var file_api_irelia_proto_depIdxs = []int32{
	42, // 0: irelia.BaseData.created_at:type_name -> google.protobuf.Timestamp
	42, // 1: irelia.BaseData.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 2: irelia.SortMethod.type:type_name -> irelia.SortType
	22, // 3: irelia.Interview.total_score:type_name -> irelia.TotalScore
	0,  // 4: irelia.Interview.status:type_name -> irelia.InterviewStatus
	4,  // 5: irelia.Interview.base_data:type_name -> irelia.BaseData
	37, // 6: irelia.Question.lipsync:type_name -> irelia.LipSyncData
	1,  // 7: irelia.Question.status:type_name -> irelia.QuestionStatus
	4,  // 8: irelia.Question.base_data:type_name -> irelia.BaseData
	37, // 9: irelia.QuestionResponse.lipsync:type_name -> irelia.LipSyncData
	36, // 10: irelia.SubmitInterviewResponse.outro:type_name -> irelia.LipSyncResponse
	5,  // 11: irelia.GetInterviewHistoryRequest.sort:type_name -> irelia.SortMethod
	42, // 12: irelia.GetInterviewHistoryRequest.from:type_name -> google.protobuf.Timestamp
	42, // 13: irelia.GetInterviewHistoryRequest.to:type_name -> google.protobuf.Timestamp
	19, // 14: irelia.GetInterviewHistoryResponse.interviews:type_name -> irelia.InterviewSummary
	22, // 15: irelia.InterviewSummary.total_score:type_name -> irelia.TotalScore
	4,  // 16: irelia.InterviewSummary.base_data:type_name -> irelia.BaseData
	1,  // 17: irelia.AnswerResult.status:type_name -> irelia.QuestionStatus
	21, // 18: irelia.GetInterviewResponse.submissions:type_name -> irelia.AnswerResult
	40, // 19: irelia.GetInterviewResponse.skills_score:type_name -> irelia.GetInterviewResponse.SkillsScoreEntry
	22, // 20: irelia.GetInterviewResponse.total_score:type_name -> irelia.TotalScore
	24, // 21: irelia.NextQuestionRequest.submissions:type_name -> irelia.QaPair
	25, // 22: irelia.NextQuestionRequest.context:type_name -> irelia.Context
	16, // 23: irelia.ScoreInterviewRequest.submissions:type_name -> irelia.AnswerData
	16, // 24: irelia.ScoreFluencyRequest.submissions:type_name -> irelia.AnswerData
	31, // 25: irelia.ScoreInterviewResponse.result:type_name -> irelia.AnswerScore
	22, // 26: irelia.ScoreInterviewResponse.total_score:type_name -> irelia.TotalScore
	32, // 27: irelia.ScoreInterviewResponse.skills:type_name -> irelia.SkillScore
	31, // 28: irelia.ScoreFluencyResponse.result:type_name -> irelia.AnswerScore
	41, // 29: irelia.ScoreFluencyResponse.skills:type_name -> irelia.ScoreFluencyResponse.SkillsEntry
	37, // 30: irelia.LipSyncResponse.lipsync:type_name -> irelia.LipSyncData
	38, // 31: irelia.LipSyncData.metadata:type_name -> irelia.LipSyncMetadata
	39, // 32: irelia.LipSyncData.mouth_cues:type_name -> irelia.MouthCue
	8,  // 33: irelia.Irelia.StartInterview:input_type -> irelia.StartInterviewRequest
	10, // 34: irelia.Irelia.GetNextQuestion:input_type -> irelia.QuestionRequest
	12, // 35: irelia.Irelia.SubmitAnswer:input_type -> irelia.SubmitAnswerRequest
	14, // 36: irelia.Irelia.SubmitInterview:input_type -> irelia.SubmitInterviewRequest
	17, // 37: irelia.Irelia.GetInterviewHistory:input_type -> irelia.GetInterviewHistoryRequest
	20, // 38: irelia.Irelia.GetInterview:input_type -> irelia.GetInterviewRequest
	28, // 39: irelia.Irelia.FavoriteInterview:input_type -> irelia.FavoriteInterviewRequest
	26, // 40: irelia.Irelia.GenerateNextQuestion:input_type -> irelia.NextQuestionRequest
	29, // 41: irelia.Irelia.ScoreInterview:input_type -> irelia.ScoreInterviewRequest
	35, // 42: irelia.Irelia.GenerateLipSync:input_type -> irelia.LipSyncRequest
	9,  // 43: irelia.Irelia.StartInterview:output_type -> irelia.StartInterviewResponse
	11, // 44: irelia.Irelia.GetNextQuestion:output_type -> irelia.QuestionResponse
	13, // 45: irelia.Irelia.SubmitAnswer:output_type -> irelia.SubmitAnswerResponse
	15, // 46: irelia.Irelia.SubmitInterview:output_type -> irelia.SubmitInterviewResponse
	18, // 47: irelia.Irelia.GetInterviewHistory:output_type -> irelia.GetInterviewHistoryResponse
	23, // 48: irelia.Irelia.GetInterview:output_type -> irelia.GetInterviewResponse
	43, // 49: irelia.Irelia.FavoriteInterview:output_type -> google.protobuf.Empty
	27, // 50: irelia.Irelia.GenerateNextQuestion:output_type -> irelia.NextQuestionResponse
	33, // 51: irelia.Irelia.ScoreInterview:output_type -> irelia.ScoreInterviewResponse
	36, // 52: irelia.Irelia.GenerateLipSync:output_type -> irelia.LipSyncResponse
	43, // [43:53] is the sub-list for method output_type
	33, // [33:43] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_irelia_proto_init() }
func file_api_irelia_proto_init() {
	if File_api_irelia_proto != nil {
		return
	}
	file_api_irelia_proto_msgTypes[12].OneofWrappers = []any{}
	file_api_irelia_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_irelia_proto_rawDesc), len(file_api_irelia_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_irelia_proto_goTypes,
		DependencyIndexes: file_api_irelia_proto_depIdxs,
		EnumInfos:         file_api_irelia_proto_enumTypes,
		MessageInfos:      file_api_irelia_proto_msgTypes,
	}.Build()
	File_api_irelia_proto = out.File
	file_api_irelia_proto_goTypes = nil
	file_api_irelia_proto_depIdxs = nil
}
