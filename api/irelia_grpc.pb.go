// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/irelia.proto

package irelia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Irelia_StartInterview_FullMethodName       = "/irelia.Irelia/StartInterview"
	Irelia_GetNextQuestion_FullMethodName      = "/irelia.Irelia/GetNextQuestion"
	Irelia_SubmitAnswer_FullMethodName         = "/irelia.Irelia/SubmitAnswer"
	Irelia_SubmitInterview_FullMethodName      = "/irelia.Irelia/SubmitInterview"
	Irelia_GetInterviewHistory_FullMethodName  = "/irelia.Irelia/GetInterviewHistory"
	Irelia_GetInterview_FullMethodName         = "/irelia.Irelia/GetInterview"
	Irelia_FavoriteInterview_FullMethodName    = "/irelia.Irelia/FavoriteInterview"
	Irelia_GenerateNextQuestion_FullMethodName = "/irelia.Irelia/GenerateNextQuestion"
	Irelia_ScoreInterview_FullMethodName       = "/irelia.Irelia/ScoreInterview"
	Irelia_GenerateLipSync_FullMethodName      = "/irelia.Irelia/GenerateLipSync"
)

// IreliaClient is the client API for Irelia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IreliaClient interface {
	// Frontend to Irelia
	StartInterview(ctx context.Context, in *StartInterviewRequest, opts ...grpc.CallOption) (*StartInterviewResponse, error)
	GetNextQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	SubmitInterview(ctx context.Context, in *SubmitInterviewRequest, opts ...grpc.CallOption) (*SubmitInterviewResponse, error)
	GetInterviewHistory(ctx context.Context, in *GetInterviewHistoryRequest, opts ...grpc.CallOption) (*GetInterviewHistoryResponse, error)
	GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*GetInterviewResponse, error)
	FavoriteInterview(ctx context.Context, in *FavoriteInterviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Irelia to Darius (Question Generator)
	GenerateNextQuestion(ctx context.Context, in *NextQuestionRequest, opts ...grpc.CallOption) (*NextQuestionResponse, error)
	ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error)
	// Irelia to Karma (Lip Sync)
	GenerateLipSync(ctx context.Context, in *LipSyncRequest, opts ...grpc.CallOption) (*LipSyncResponse, error)
}

type ireliaClient struct {
	cc grpc.ClientConnInterface
}

func NewIreliaClient(cc grpc.ClientConnInterface) IreliaClient {
	return &ireliaClient{cc}
}

func (c *ireliaClient) StartInterview(ctx context.Context, in *StartInterviewRequest, opts ...grpc.CallOption) (*StartInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartInterviewResponse)
	err := c.cc.Invoke(ctx, Irelia_StartInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) GetNextQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, Irelia_GetNextQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, Irelia_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) SubmitInterview(ctx context.Context, in *SubmitInterviewRequest, opts ...grpc.CallOption) (*SubmitInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitInterviewResponse)
	err := c.cc.Invoke(ctx, Irelia_SubmitInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) GetInterviewHistory(ctx context.Context, in *GetInterviewHistoryRequest, opts ...grpc.CallOption) (*GetInterviewHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterviewHistoryResponse)
	err := c.cc.Invoke(ctx, Irelia_GetInterviewHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*GetInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterviewResponse)
	err := c.cc.Invoke(ctx, Irelia_GetInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) FavoriteInterview(ctx context.Context, in *FavoriteInterviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Irelia_FavoriteInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) GenerateNextQuestion(ctx context.Context, in *NextQuestionRequest, opts ...grpc.CallOption) (*NextQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextQuestionResponse)
	err := c.cc.Invoke(ctx, Irelia_GenerateNextQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreInterviewResponse)
	err := c.cc.Invoke(ctx, Irelia_ScoreInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ireliaClient) GenerateLipSync(ctx context.Context, in *LipSyncRequest, opts ...grpc.CallOption) (*LipSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LipSyncResponse)
	err := c.cc.Invoke(ctx, Irelia_GenerateLipSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IreliaServer is the server API for Irelia service.
// All implementations should embed UnimplementedIreliaServer
// for forward compatibility.
type IreliaServer interface {
	// Frontend to Irelia
	StartInterview(context.Context, *StartInterviewRequest) (*StartInterviewResponse, error)
	GetNextQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	SubmitInterview(context.Context, *SubmitInterviewRequest) (*SubmitInterviewResponse, error)
	GetInterviewHistory(context.Context, *GetInterviewHistoryRequest) (*GetInterviewHistoryResponse, error)
	GetInterview(context.Context, *GetInterviewRequest) (*GetInterviewResponse, error)
	FavoriteInterview(context.Context, *FavoriteInterviewRequest) (*emptypb.Empty, error)
	// Irelia to Darius (Question Generator)
	GenerateNextQuestion(context.Context, *NextQuestionRequest) (*NextQuestionResponse, error)
	ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error)
	// Irelia to Karma (Lip Sync)
	GenerateLipSync(context.Context, *LipSyncRequest) (*LipSyncResponse, error)
}

// UnimplementedIreliaServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIreliaServer struct{}

func (UnimplementedIreliaServer) StartInterview(context.Context, *StartInterviewRequest) (*StartInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInterview not implemented")
}
func (UnimplementedIreliaServer) GetNextQuestion(context.Context, *QuestionRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextQuestion not implemented")
}
func (UnimplementedIreliaServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedIreliaServer) SubmitInterview(context.Context, *SubmitInterviewRequest) (*SubmitInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitInterview not implemented")
}
func (UnimplementedIreliaServer) GetInterviewHistory(context.Context, *GetInterviewHistoryRequest) (*GetInterviewHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterviewHistory not implemented")
}
func (UnimplementedIreliaServer) GetInterview(context.Context, *GetInterviewRequest) (*GetInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterview not implemented")
}
func (UnimplementedIreliaServer) FavoriteInterview(context.Context, *FavoriteInterviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteInterview not implemented")
}
func (UnimplementedIreliaServer) GenerateNextQuestion(context.Context, *NextQuestionRequest) (*NextQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNextQuestion not implemented")
}
func (UnimplementedIreliaServer) ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreInterview not implemented")
}
func (UnimplementedIreliaServer) GenerateLipSync(context.Context, *LipSyncRequest) (*LipSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLipSync not implemented")
}
func (UnimplementedIreliaServer) testEmbeddedByValue() {}

// UnsafeIreliaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IreliaServer will
// result in compilation errors.
type UnsafeIreliaServer interface {
	mustEmbedUnimplementedIreliaServer()
}

func RegisterIreliaServer(s grpc.ServiceRegistrar, srv IreliaServer) {
	// If the following call pancis, it indicates UnimplementedIreliaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Irelia_ServiceDesc, srv)
}

func _Irelia_StartInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).StartInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_StartInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).StartInterview(ctx, req.(*StartInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_GetNextQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).GetNextQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_GetNextQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).GetNextQuestion(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_SubmitInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).SubmitInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_SubmitInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).SubmitInterview(ctx, req.(*SubmitInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_GetInterviewHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).GetInterviewHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_GetInterviewHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).GetInterviewHistory(ctx, req.(*GetInterviewHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_GetInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).GetInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_GetInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).GetInterview(ctx, req.(*GetInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_FavoriteInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).FavoriteInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_FavoriteInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).FavoriteInterview(ctx, req.(*FavoriteInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_GenerateNextQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).GenerateNextQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_GenerateNextQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).GenerateNextQuestion(ctx, req.(*NextQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_ScoreInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).ScoreInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_ScoreInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).ScoreInterview(ctx, req.(*ScoreInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irelia_GenerateLipSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IreliaServer).GenerateLipSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Irelia_GenerateLipSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IreliaServer).GenerateLipSync(ctx, req.(*LipSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Irelia_ServiceDesc is the grpc.ServiceDesc for Irelia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Irelia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "irelia.Irelia",
	HandlerType: (*IreliaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartInterview",
			Handler:    _Irelia_StartInterview_Handler,
		},
		{
			MethodName: "GetNextQuestion",
			Handler:    _Irelia_GetNextQuestion_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _Irelia_SubmitAnswer_Handler,
		},
		{
			MethodName: "SubmitInterview",
			Handler:    _Irelia_SubmitInterview_Handler,
		},
		{
			MethodName: "GetInterviewHistory",
			Handler:    _Irelia_GetInterviewHistory_Handler,
		},
		{
			MethodName: "GetInterview",
			Handler:    _Irelia_GetInterview_Handler,
		},
		{
			MethodName: "FavoriteInterview",
			Handler:    _Irelia_FavoriteInterview_Handler,
		},
		{
			MethodName: "GenerateNextQuestion",
			Handler:    _Irelia_GenerateNextQuestion_Handler,
		},
		{
			MethodName: "ScoreInterview",
			Handler:    _Irelia_ScoreInterview_Handler,
		},
		{
			MethodName: "GenerateLipSync",
			Handler:    _Irelia_GenerateLipSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/irelia.proto",
}
