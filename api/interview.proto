syntax = "proto3";

package interview;

option go_package = "irelia/api/interview";

import "google/api/annotations.proto";

service InterviewService {
  // Frontend to Irelia
  rpc StartInterview(StartInterviewRequest) returns (StartInterviewResponse) {
    option (google.api.http) = {
      post: "/interviews/start"
      body: "*"
    };
  }
  
  rpc SubmitAnswer(SubmitAnswerRequest) returns (SubmitAnswerResponse) {
    option (google.api.http) = {
      post: "/interviews/{interview_id}/answer"
      body: "*"
    };
  }

  rpc GetInterview(GetInterviewRequest) returns (GetInterviewResponse) {
    option (google.api.http) = {
      get: "/interviews/history/{interview_id}"
    };
  }
  
  rpc SubmitInterview(SubmitInterviewRequest) returns (SubmitInterviewResponse) {
    option (google.api.http) = {
      get: "/interviews/{interview_id}/submit"
    };
  }
  
  rpc GetNextQuestion(QuestionRequest) returns (QuestionResponse) {
    option (google.api.http) = {
      get: "/interviews/{interview_id}/questions/{question_index}"
    };
  }
  
  rpc GetInterviewHistory(GetInterviewHistoryRequest) returns (GetInterviewHistoryResponse) {
    option (google.api.http) = {
      get: "/interviews/history"
    };
  }
  
  // Irelia to Darius (Question Generator)
  rpc GenerateNextQuestion(NextQuestionRequest) returns (NextQuestionResponse) {
    option (google.api.http) = {
      post: "/interviews/{interview_id}/next-question"
      body: "*"
    };
  }

  rpc ScoreInterview(ScoreInterviewRequest) returns (ScoreInterviewResponse) {
    option (google.api.http) = {
      post: "/interviews/{interview_id}/score"
      body: "*"
    };
  }
  
  // Irelia to Karma (Lip Sync)
  rpc GenerateLipSync(LipSyncRequest) returns (LipSyncResponse) {
    option (google.api.http) = {
      post: "/interviews/{interview_id}/lip-sync"
      body: "*"
    };
  }
}

// Database
message Interview {
  string id = 1;
  string field = 2;
  string position = 3;
  string language = 4;
  string voice_id = 5;
  int32 speed = 6;
  string level = 7;
  bool coding = 8;
  int32 max_questions = 9;
  int32 remaining_questions = 10;
  TotalScore total_score = 11;
  string positive_feedback = 12;
  string actionable_feedback = 13;
  string final_comment = 14;
  string status = 15;
  string created_at = 16;
  string updated_at = 17;
}

message Question {
  string interview_id = 1;
  int32 index = 2;
  string content = 3;
  string audio = 4;
  LipSyncData lipsync = 5;
  string answer = 6;
  string record_proof = 7;
  string comment = 8;
  string score = 9;
  string status = 10;
  string created_at = 11;
  string updated_at = 12;
}

// Frontend to Irelia
message StartInterviewRequest {
  string field = 1;
  string position = 2;
  string language = 3;
  string models = 4;
  int32 speed = 5;
  string level = 6;
  int32 max_questions = 7;
  bool skip_intro = 8;
  bool coding = 9;
}

message StartInterviewResponse {
  string interview_id = 1;
}

message SubmitAnswerRequest {
  string interview_id = 1;
  int32 index = 2;
  string answer = 3;
  string record_proof = 4;
}

message SubmitAnswerResponse {
  string status = 1;
}

message QuestionRequest {
  string interview_id = 1;
  int32 question_index = 2;
}

message QuestionResponse {
  int32 question_id = 1;
  string content = 2;
  string audio = 3;
  LipSyncData lipsync = 4;
  bool is_last_question = 5;
}

message SubmitInterviewRequest {
  string interview_id = 1;
}

message SubmitInterviewResponse {
  LipSyncResponse outro = 1;
}

message AnswerData {
  int32 index = 1;
  string question = 2;
  string answer = 3;
  string record_proof = 4;
}

message ScoreInterviewRequest {
  string interview_id = 1;
  repeated AnswerData submissions = 2;
}

message AnswerScore {
  int32 index = 1;
  string comment = 2;
  string score = 3;
}

message ScoreInterviewResponse {
  repeated AnswerScore submissions = 1;
  TotalScore total_score = 2;
  string positive_feedback = 3;
  string actionable_feedback = 4;
  string final_comment = 5;
}

message GetInterviewRequest {
  string interview_id = 1;
}

message AnswerResult {
  int32 index = 1;
  string content = 2;
  string answer = 3;
  string record_proof = 4;
  string comment = 5;
  string score = 6;   // "A", "B", "C", "D", "F"
  string status = 7;  // "rated", "answered", "new"
}

message GetInterviewResponse {
  string interview_id = 1;
  repeated AnswerResult submissions = 2;
  TotalScore total_score = 3;
  string positive_feedback = 4;
  string actionable_feedback = 5;
  string final_comment = 6;
}

message TotalScore {
  int32 A = 1;
  int32 B = 2;
  int32 C = 3;
  int32 D = 4;
  int32 F = 5;
}

message GetInterviewHistoryRequest {
  int32 page = 1;
}

message GetInterviewHistoryResponse {
  int32 page = 1;
  int32 per_page = 2;
  int32 total_pages = 3;
  repeated InterviewSummary interviews = 4;
}

message InterviewSummary {
  string interview_id = 1;
  string field = 2;
  string position = 3;
  TotalScore total_score = 4;
  string created_at = 5;
}

// Irelia to Darius (Question Generator)
message QaPair {
  string question = 1;
  string answer = 2;
}

message Context {
  string field = 1;
  string position = 2;
  string language = 3;
  string level = 4;
  int32 max_questions = 5;
  bool coding = 6;
}

message NextQuestionRequest {
  string interview_id = 1;
  repeated QaPair submissions = 2;
  Context context = 3;
  int32 remaining_questions = 4;
}

message NextQuestionResponse {
  repeated string questions = 1;
}

// Irelia to Karma (Lip Sync)
message LipSyncRequest {
  string interview_id = 1;
  string content = 2;
  string voice_id = 3;
  int32 speed = 4;
}

message LipSyncResponse {
  string audio = 1;
  LipSyncData lipsync = 2;
}

message LipSyncData {
  LipSyncMetadata metadata = 1;
  repeated MouthCue mouth_cues = 2;
}

message LipSyncMetadata {
  string sound_file = 1;
  float duration = 2;
}

message MouthCue {
  float start = 1;
  float end = 2;
  string value = 3;
}